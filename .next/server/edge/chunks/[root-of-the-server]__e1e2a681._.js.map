{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["// middleware.ts (請確保這個文件存在於你的專案根目錄或 src 目錄下)\r\nimport { getToken } from 'next-auth/jwt';\r\nimport { NextRequest, NextResponse } from 'next/server';\r\n\r\nexport { default } from \"next-auth/middleware\"; // 這是 NextAuth.js v4 的基本 middleware 導入方式\r\n\r\n// 這是在 NextAuth.js v4 中處理路由保護和授權的推薦方式\r\nexport async function middleware(req) {\r\n    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });\r\n    console.log(\"Middleware token:\", token);\r\n    const userRole = token?.role;\r\n    console.log(`Middleware Path: ${req.nextUrl.pathname}, UserRole: ${userRole}`);\r\n\r\n    console.log(`Middleware: Path: ${req.nextUrl.pathname}, UserRole: ${userRole}`);\r\n\r\n    const PROTECTED_ROUTES_AND_ROLES = {\r\n        '/admin': ['OWNER'],\r\n        '/chef': ['CHEF', 'OWNER'],\r\n        '/staff': ['STAFF', 'CHEF', 'OWNER'],\r\n    };\r\n\r\n    let isCurrentPathProtected = false;\r\n    let requiredRoles: string[] = [];\r\n\r\n    for (const pathPrefix in PROTECTED_ROUTES_AND_ROLES) {\r\n        if (req.nextUrl.pathname.startsWith(pathPrefix)) {\r\n            isCurrentPathProtected = true;\r\n            requiredRoles = PROTECTED_ROUTES_AND_ROLES[pathPrefix];\r\n            break;\r\n        }\r\n    }\r\n\r\n    // 如果路徑受保護且沒有登入 (token 不存在或 role 為空)\r\n    if (isCurrentPathProtected && !token) {\r\n        console.log(`Middleware: Protected path \"${req.nextUrl.pathname}\" accessed without login. Redirecting to sign-in.`);\r\n        const signInPage = new URL('/login', req.nextUrl.origin); // 你的登入頁面路徑\r\n        signInPage.searchParams.set('callbackUrl', req.nextUrl.href);\r\n        return NextResponse.redirect(signInPage);\r\n    }\r\n\r\n    // 如果路徑受保護且已登入，但角色不符合要求\r\n    if (isCurrentPathProtected && token && userRole && !requiredRoles.includes(userRole)) {\r\n        console.log(`Middleware: User with role \"${userRole}\" attempted to access protected path \"${req.nextUrl.pathname}\" (required: ${requiredRoles.join(', ')}). Redirecting to unauthorized.`);\r\n        return NextResponse.redirect(new URL('/unauthorized', req.nextUrl.origin));\r\n    }\r\n\r\n    // 如果一切正常，允許請求繼續\r\n    return NextResponse.next();\r\n}\r\n\r\n// 配置 middleware 應該匹配的路徑\r\nexport const config = {\r\n    // 匹配所有路徑，除了 API 路由、靜態文件和 _next 內部文件\r\n    matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],\r\n};"],"names":[],"mappings":"AAAA,6CAA6C;;;;;AAC7C;AACA;AAAA;AAEA,mQAAgD,wCAAwC;;;;AAGjF,eAAe,WAAW,GAAG;IAChC,MAAM,QAAQ,MAAM,CAAA,GAAA,oJAAA,CAAA,WAAQ,AAAD,EAAE;QAAE;QAAK,QAAQ,QAAQ,GAAG,CAAC,eAAe;IAAC;IACxE,QAAQ,GAAG,CAAC,qBAAqB;IACjC,MAAM,WAAW,OAAO;IACxB,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,IAAI,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,UAAU;IAE7E,QAAQ,GAAG,CAAC,CAAC,kBAAkB,EAAE,IAAI,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,UAAU;IAE9E,MAAM,6BAA6B;QAC/B,UAAU;YAAC;SAAQ;QACnB,SAAS;YAAC;YAAQ;SAAQ;QAC1B,UAAU;YAAC;YAAS;YAAQ;SAAQ;IACxC;IAEA,IAAI,yBAAyB;IAC7B,IAAI,gBAA0B,EAAE;IAEhC,IAAK,MAAM,cAAc,2BAA4B;QACjD,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa;YAC7C,yBAAyB;YACzB,gBAAgB,0BAA0B,CAAC,WAAW;YACtD;QACJ;IACJ;IAEA,oCAAoC;IACpC,IAAI,0BAA0B,CAAC,OAAO;QAClC,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,IAAI,OAAO,CAAC,QAAQ,CAAC,iDAAiD,CAAC;QAClH,MAAM,aAAa,IAAI,IAAI,UAAU,IAAI,OAAO,CAAC,MAAM,GAAG,WAAW;QACrE,WAAW,YAAY,CAAC,GAAG,CAAC,eAAe,IAAI,OAAO,CAAC,IAAI;QAC3D,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IACjC;IAEA,uBAAuB;IACvB,IAAI,0BAA0B,SAAS,YAAY,CAAC,cAAc,QAAQ,CAAC,WAAW;QAClF,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,SAAS,sCAAsC,EAAE,IAAI,OAAO,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAc,IAAI,CAAC,MAAM,+BAA+B,CAAC;QACzL,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iBAAiB,IAAI,OAAO,CAAC,MAAM;IAC5E;IAEA,gBAAgB;IAChB,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC5B;AAGO,MAAM,SAAS;IAClB,oCAAoC;IACpC,SAAS;QAAC;KAAoD;AAClE"}}]
}
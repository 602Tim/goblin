{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { getToken } from 'next-auth/jwt';\r\nimport { NextRequest, NextResponse } from 'next/server';\r\n\r\nexport async function middleware(req: NextRequest) {\r\n    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });\r\n    console.log(\"Middleware token:\", token);\r\n    const userRole = token?.role;\r\n    console.log(`Middleware Path: ${req.nextUrl.pathname}, UserRole: ${userRole}`);\r\n\r\n    const PROTECTED_ROUTES_AND_ROLES: Record<string, string[]> = {\r\n        '/admin': ['OWNER'],\r\n        '/chef': ['CHEF', 'OWNER'],\r\n        '/staff': ['STAFF', 'CHEF', 'OWNER'],\r\n    };\r\n\r\n    let isCurrentPathProtected = false;\r\n    let requiredRoles: string[] = [];\r\n\r\n    for (const pathPrefix in PROTECTED_ROUTES_AND_ROLES) {\r\n        if (req.nextUrl.pathname.startsWith(pathPrefix)) {\r\n            isCurrentPathProtected = true;\r\n            requiredRoles = PROTECTED_ROUTES_AND_ROLES[pathPrefix];\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (isCurrentPathProtected && !token) {\r\n        console.log(`Middleware: Protected path \"${req.nextUrl.pathname}\" accessed without login. Redirecting to sign-in.`);\r\n        const signInPage = new URL('/login', req.nextUrl.origin);\r\n        signInPage.searchParams.set('callbackUrl', req.nextUrl.href);\r\n        return NextResponse.redirect(signInPage);\r\n    }\r\n\r\n    if (isCurrentPathProtected && token && userRole && !requiredRoles.includes(userRole)) {\r\n        console.log(`Middleware: User with role \"${userRole}\" attempted to access protected path \"${req.nextUrl.pathname}\" (required: ${requiredRoles.join(', ')}). Redirecting to unauthorized.`);\r\n        return NextResponse.redirect(new URL('/unauthorized', req.nextUrl.origin));\r\n    }\r\n\r\n    return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n    matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],\r\n};\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;AAEO,eAAe,WAAW,GAAgB;IAC7C,MAAM,QAAQ,MAAM,CAAA,GAAA,oJAAA,CAAA,WAAQ,AAAD,EAAE;QAAE;QAAK,QAAQ,QAAQ,GAAG,CAAC,eAAe;IAAC;IACxE,QAAQ,GAAG,CAAC,qBAAqB;IACjC,MAAM,WAAW,OAAO;IACxB,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,IAAI,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,UAAU;IAE7E,MAAM,6BAAuD;QACzD,UAAU;YAAC;SAAQ;QACnB,SAAS;YAAC;YAAQ;SAAQ;QAC1B,UAAU;YAAC;YAAS;YAAQ;SAAQ;IACxC;IAEA,IAAI,yBAAyB;IAC7B,IAAI,gBAA0B,EAAE;IAEhC,IAAK,MAAM,cAAc,2BAA4B;QACjD,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa;YAC7C,yBAAyB;YACzB,gBAAgB,0BAA0B,CAAC,WAAW;YACtD;QACJ;IACJ;IAEA,IAAI,0BAA0B,CAAC,OAAO;QAClC,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,IAAI,OAAO,CAAC,QAAQ,CAAC,iDAAiD,CAAC;QAClH,MAAM,aAAa,IAAI,IAAI,UAAU,IAAI,OAAO,CAAC,MAAM;QACvD,WAAW,YAAY,CAAC,GAAG,CAAC,eAAe,IAAI,OAAO,CAAC,IAAI;QAC3D,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IACjC;IAEA,IAAI,0BAA0B,SAAS,YAAY,CAAC,cAAc,QAAQ,CAAC,WAAW;QAClF,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,SAAS,sCAAsC,EAAE,IAAI,OAAO,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAc,IAAI,CAAC,MAAM,+BAA+B,CAAC;QACzL,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iBAAiB,IAAI,OAAO,CAAC,MAAM;IAC5E;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC5B;AAEO,MAAM,SAAS;IAClB,SAAS;QAAC;KAAoD;AAClE"}}]
}
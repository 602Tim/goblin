module.exports = {

"[project]/node_modules/mqtt/build/lib/topic-alias-recv.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
class TopicAliasRecv {
    constructor(max){
        this.aliasToTopic = {};
        this.max = max;
    }
    put(topic, alias) {
        if (alias === 0 || alias > this.max) {
            return false;
        }
        this.aliasToTopic[alias] = topic;
        this.length = Object.keys(this.aliasToTopic).length;
        return true;
    }
    getTopicByAlias(alias) {
        return this.aliasToTopic[alias];
    }
    clear() {
        this.aliasToTopic = {};
    }
}
exports.default = TopicAliasRecv; //# sourceMappingURL=topic-alias-recv.js.map
}}),
"[project]/node_modules/mqtt/build/lib/default-message-id-provider.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
class DefaultMessageIdProvider {
    constructor(){
        this.nextId = Math.max(1, Math.floor(Math.random() * 65535));
    }
    allocate() {
        const id = this.nextId++;
        if (this.nextId === 65536) {
            this.nextId = 1;
        }
        return id;
    }
    getLastAllocated() {
        return this.nextId === 1 ? 65535 : this.nextId - 1;
    }
    register(messageId) {
        return true;
    }
    deallocate(messageId) {}
    clear() {}
}
exports.default = DefaultMessageIdProvider; //# sourceMappingURL=default-message-id-provider.js.map
}}),
"[project]/node_modules/mqtt/build/lib/validations.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateTopic = validateTopic;
exports.validateTopics = validateTopics;
function validateTopic(topic) {
    const parts = topic.split('/');
    for(let i = 0; i < parts.length; i++){
        if (parts[i] === '+') {
            continue;
        }
        if (parts[i] === '#') {
            return i === parts.length - 1;
        }
        if (parts[i].indexOf('+') !== -1 || parts[i].indexOf('#') !== -1) {
            return false;
        }
    }
    return true;
}
function validateTopics(topics) {
    if (topics.length === 0) {
        return 'empty_topic_list';
    }
    for(let i = 0; i < topics.length; i++){
        if (!validateTopic(topics[i])) {
            return topics[i];
        }
    }
    return null;
} //# sourceMappingURL=validations.js.map
}}),
"[project]/node_modules/mqtt/build/lib/store.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const readable_stream_1 = __turbopack_context__.r("[project]/node_modules/readable-stream/lib/ours/index.js [app-ssr] (ecmascript)");
const streamsOpts = {
    objectMode: true
};
const defaultStoreOptions = {
    clean: true
};
class Store {
    constructor(options){
        this.options = options || {};
        this.options = Object.assign(Object.assign({}, defaultStoreOptions), options);
        this._inflights = new Map();
    }
    put(packet, cb) {
        this._inflights.set(packet.messageId, packet);
        if (cb) {
            cb();
        }
        return this;
    }
    createStream() {
        const stream = new readable_stream_1.Readable(streamsOpts);
        const values = [];
        let destroyed = false;
        let i = 0;
        this._inflights.forEach((value, key)=>{
            values.push(value);
        });
        stream._read = ()=>{
            if (!destroyed && i < values.length) {
                stream.push(values[i++]);
            } else {
                stream.push(null);
            }
        };
        stream.destroy = (err)=>{
            if (destroyed) {
                return;
            }
            destroyed = true;
            setTimeout(()=>{
                stream.emit('close');
            }, 0);
            return stream;
        };
        return stream;
    }
    del(packet, cb) {
        const toDelete = this._inflights.get(packet.messageId);
        if (toDelete) {
            this._inflights.delete(packet.messageId);
            cb(null, toDelete);
        } else if (cb) {
            cb(new Error('missing packet'));
        }
        return this;
    }
    get(packet, cb) {
        const storedPacket = this._inflights.get(packet.messageId);
        if (storedPacket) {
            cb(null, storedPacket);
        } else if (cb) {
            cb(new Error('missing packet'));
        }
        return this;
    }
    close(cb) {
        if (this.options.clean) {
            this._inflights = null;
        }
        if (cb) {
            cb();
        }
    }
}
exports.default = Store; //# sourceMappingURL=store.js.map
}}),
"[project]/node_modules/mqtt/build/lib/handlers/publish.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const validReasonCodes = [
    0,
    16,
    128,
    131,
    135,
    144,
    145,
    151,
    153
];
const handlePublish = (client, packet, done)=>{
    client.log('handlePublish: packet %o', packet);
    done = typeof done !== 'undefined' ? done : client.noop;
    let topic = packet.topic.toString();
    const message = packet.payload;
    const { qos } = packet;
    const { messageId } = packet;
    const { options } = client;
    if (client.options.protocolVersion === 5) {
        let alias;
        if (packet.properties) {
            alias = packet.properties.topicAlias;
        }
        if (typeof alias !== 'undefined') {
            if (topic.length === 0) {
                if (alias > 0 && alias <= 0xffff) {
                    const gotTopic = client['topicAliasRecv'].getTopicByAlias(alias);
                    if (gotTopic) {
                        topic = gotTopic;
                        client.log('handlePublish :: topic complemented by alias. topic: %s - alias: %d', topic, alias);
                    } else {
                        client.log('handlePublish :: unregistered topic alias. alias: %d', alias);
                        client.emit('error', new Error('Received unregistered Topic Alias'));
                        return;
                    }
                } else {
                    client.log('handlePublish :: topic alias out of range. alias: %d', alias);
                    client.emit('error', new Error('Received Topic Alias is out of range'));
                    return;
                }
            } else if (client['topicAliasRecv'].put(topic, alias)) {
                client.log('handlePublish :: registered topic: %s - alias: %d', topic, alias);
            } else {
                client.log('handlePublish :: topic alias out of range. alias: %d', alias);
                client.emit('error', new Error('Received Topic Alias is out of range'));
                return;
            }
        }
    }
    client.log('handlePublish: qos %d', qos);
    switch(qos){
        case 2:
            {
                options.customHandleAcks(topic, message, packet, (error, code)=>{
                    if (typeof error === 'number') {
                        code = error;
                        error = null;
                    }
                    if (error) {
                        return client.emit('error', error);
                    }
                    if (validReasonCodes.indexOf(code) === -1) {
                        return client.emit('error', new Error('Wrong reason code for pubrec'));
                    }
                    if (code) {
                        client['_sendPacket']({
                            cmd: 'pubrec',
                            messageId,
                            reasonCode: code
                        }, done);
                    } else {
                        client.incomingStore.put(packet, ()=>{
                            client['_sendPacket']({
                                cmd: 'pubrec',
                                messageId
                            }, done);
                        });
                    }
                });
                break;
            }
        case 1:
            {
                options.customHandleAcks(topic, message, packet, (error, code)=>{
                    if (typeof error === 'number') {
                        code = error;
                        error = null;
                    }
                    if (error) {
                        return client.emit('error', error);
                    }
                    if (validReasonCodes.indexOf(code) === -1) {
                        return client.emit('error', new Error('Wrong reason code for puback'));
                    }
                    if (!code) {
                        client.emit('message', topic, message, packet);
                    }
                    client.handleMessage(packet, (err)=>{
                        if (err) {
                            return done && done(err);
                        }
                        client['_sendPacket']({
                            cmd: 'puback',
                            messageId,
                            reasonCode: code
                        }, done);
                    });
                });
                break;
            }
        case 0:
            client.emit('message', topic, message, packet);
            client.handleMessage(packet, done);
            break;
        default:
            client.log('handlePublish: unknown QoS. Doing nothing.');
            break;
    }
};
exports.default = handlePublish; //# sourceMappingURL=publish.js.map
}}),
"[project]/node_modules/mqtt/package.json (json)": ((__turbopack_context__) => {

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.v(JSON.parse("{\"name\":\"mqtt\",\"description\":\"A library for the MQTT protocol\",\"version\":\"5.13.1\",\"contributors\":[\"Adam Rudd <adamvrr@gmail.com>\",\"Matteo Collina <matteo.collina@gmail.com> (https://github.com/mcollina)\",\"Siarhei Buntsevich <scarry0506@gmail.com> (https://github.com/scarry1992)\",\"Yoseph Maguire <yomaguir@microsoft.com> (https://github.com/YoDaMa)\",\"Daniel Lando <daniel.sorridi@gmail.com> (https://github.com/robertsLando)\"],\"keywords\":[\"mqtt\",\"publish/subscribe\",\"publish\",\"subscribe\"],\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git://github.com/mqttjs/MQTT.js.git\"},\"main\":\"./build/index.js\",\"module\":\"./dist/mqtt.esm.js\",\"bin\":{\"mqtt_pub\":\"./build/bin/pub.js\",\"mqtt_sub\":\"./build/bin/sub.js\",\"mqtt\":\"./build/bin/mqtt.js\"},\"files\":[\"dist/\",\"CONTRIBUTING.md\",\"LICENSE.md\",\"help/\",\"build/\",\"src/\"],\"exports\":{\".\":{\"react-native\":\"./dist/mqtt.esm.js\",\"browser\":{\"import\":\"./dist/mqtt.esm.js\",\"default\":\"./dist/mqtt.min.js\"},\"default\":\"./build/index.js\"},\"./package.json\":\"./package.json\",\"./*.map\":\"./build/*.js.map\",\"./dist/*\":\"./dist/*.js\",\"./*\":\"./build/*.js\"},\"types\":\"build/index.d.ts\",\"typesVersions\":{\"*\":{\"*\":[\"./build/index.d.ts\"]}},\"scripts\":{\"lint\":\"eslint --ext .ts .\",\"lint-fix\":\"eslint --fix --ext .ts .\",\"build:ts\":\"rimraf build/ && tsc -p tsconfig.build.json\",\"build:browser\":\"node esbuild.js\",\"build\":\"npm run build:ts && npm run build:browser\",\"prepare\":\"npm run build\",\"unit-test:node\":\"node -r esbuild-register --test-concurrency 4 --test-reporter=junit --test-reporter-destination=junit.xml --test-reporter=spec --test-reporter-destination=stdout --test test/node/*.ts \",\"unit-test:browser\":\"wtr\",\"test:node\":\"node_modules/.bin/nyc npm run unit-test:node\",\"test:browser\":\"npm run build && npm run unit-test:browser\",\"test\":\"npm run test:node\",\"changelog\":\"conventional-changelog -p angular -i CHANGELOG.md -s && git add CHANGELOG.md\",\"changelog-init\":\"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\",\"release\":\"read -p 'GITHUB_TOKEN: ' GITHUB_TOKEN && export GITHUB_TOKEN=$GITHUB_TOKEN && release-it\"},\"release-it\":{\"github\":{\"release\":true},\"git\":{\"tagName\":\"v${version}\",\"commitMessage\":\"chore(release): ${version}\"},\"hooks\":{\"before:init\":[\"npm run test\"]},\"npm\":{\"publish\":true},\"plugins\":{\"@release-it/conventional-changelog\":{\"preset\":\"angular\",\"infile\":\"CHANGELOG.md\"}}},\"publishConfig\":{\"provenance\":true},\"pre-commit\":[\"lint\"],\"engines\":{\"node\":\">=16.0.0\"},\"browser\":{\"./mqtt.js\":\"./dist/mqtt.js\",\"fs\":false,\"tls\":false,\"net\":false},\"dependencies\":{\"commist\":\"^3.2.0\",\"concat-stream\":\"^2.0.0\",\"debug\":\"^4.4.0\",\"help-me\":\"^5.0.0\",\"lru-cache\":\"^10.4.3\",\"minimist\":\"^1.2.8\",\"mqtt-packet\":\"^9.0.2\",\"number-allocator\":\"^1.0.14\",\"readable-stream\":\"^4.7.0\",\"rfdc\":\"^1.4.1\",\"socks\":\"^2.8.3\",\"split2\":\"^4.2.0\",\"worker-timers\":\"^7.1.8\",\"ws\":\"^8.18.0\"},\"devDependencies\":{\"@esm-bundle/chai\":\"^4.3.4\",\"@release-it/conventional-changelog\":\"^7.0.2\",\"@types/chai\":\"^4.3.20\",\"@types/node\":\"^20.17.16\",\"@types/readable-stream\":\"^4.0.18\",\"@types/sinon\":\"^17.0.3\",\"@types/tape\":\"^5.8.1\",\"@types/ws\":\"^8.18.1\",\"@typescript-eslint/eslint-plugin\":\"^6.21.0\",\"@typescript-eslint/parser\":\"^6.21.0\",\"@web/test-runner\":\"^0.19.0\",\"@web/test-runner-playwright\":\"^0.11.0\",\"aedes-cli\":\"^0.8.0\",\"chai\":\"^4.5.0\",\"chokidar\":\"^3.6.0\",\"conventional-changelog-cli\":\"^4.1.0\",\"end-of-stream\":\"^1.4.4\",\"esbuild\":\"^0.25.0\",\"esbuild-plugin-polyfill-node\":\"^0.3.0\",\"esbuild-register\":\"^3.6.0\",\"eslint\":\"^8.57.1\",\"eslint-config-airbnb-base\":\"^15.0.0\",\"eslint-config-airbnb-typescript\":\"^17.1.0\",\"eslint-config-prettier\":\"^9.1.0\",\"eslint-plugin-import\":\"^2.31.0\",\"eslint-plugin-prettier\":\"^5.2.3\",\"global\":\"^4.4.0\",\"leaked-handles\":\"^5.2.0\",\"mkdirp\":\"^3.0.1\",\"mqtt-connection\":\"^4.1.0\",\"mqtt-level-store\":\"^3.1.0\",\"nyc\":\"^15.1.0\",\"pre-commit\":\"^1.2.2\",\"prettier\":\"^3.4.2\",\"release-it\":\"^16.3.0\",\"rimraf\":\"^5.0.10\",\"should\":\"^13.2.3\",\"sinon\":\"^17.0.2\",\"snazzy\":\"^9.0.0\",\"tape\":\"^5.9.0\",\"ts-node\":\"^10.9.2\",\"typescript\":\"^5.7.3\"}}"));}}),
"[project]/node_modules/mqtt/build/lib/shared.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MQTTJS_VERSION = exports.nextTick = exports.ErrorWithSubackPacket = exports.ErrorWithReasonCode = void 0;
exports.applyMixin = applyMixin;
class ErrorWithReasonCode extends Error {
    constructor(message, code){
        super(message);
        this.code = code;
        Object.setPrototypeOf(this, ErrorWithReasonCode.prototype);
        Object.getPrototypeOf(this).name = 'ErrorWithReasonCode';
    }
}
exports.ErrorWithReasonCode = ErrorWithReasonCode;
class ErrorWithSubackPacket extends Error {
    constructor(message, packet){
        super(message);
        this.packet = packet;
        Object.setPrototypeOf(this, ErrorWithSubackPacket.prototype);
        Object.getPrototypeOf(this).name = 'ErrorWithSubackPacket';
    }
}
exports.ErrorWithSubackPacket = ErrorWithSubackPacket;
function applyMixin(target, mixin, includeConstructor = false) {
    var _a;
    const inheritanceChain = [
        mixin
    ];
    while(true){
        const current = inheritanceChain[0];
        const base = Object.getPrototypeOf(current);
        if (base === null || base === void 0 ? void 0 : base.prototype) {
            inheritanceChain.unshift(base);
        } else {
            break;
        }
    }
    for (const ctor of inheritanceChain){
        for (const prop of Object.getOwnPropertyNames(ctor.prototype)){
            if (includeConstructor || prop !== 'constructor') {
                Object.defineProperty(target.prototype, prop, (_a = Object.getOwnPropertyDescriptor(ctor.prototype, prop)) !== null && _a !== void 0 ? _a : Object.create(null));
            }
        }
    }
}
exports.nextTick = typeof (process === null || process === void 0 ? void 0 : process.nextTick) === 'function' ? process.nextTick : (callback)=>{
    setTimeout(callback, 0);
};
exports.MQTTJS_VERSION = __turbopack_context__.r("[project]/node_modules/mqtt/package.json (json)").version; //# sourceMappingURL=shared.js.map
}}),
"[project]/node_modules/mqtt/build/lib/handlers/ack.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ReasonCodes = void 0;
const shared_1 = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/shared.js [app-ssr] (ecmascript)");
exports.ReasonCodes = {
    0: '',
    1: 'Unacceptable protocol version',
    2: 'Identifier rejected',
    3: 'Server unavailable',
    4: 'Bad username or password',
    5: 'Not authorized',
    16: 'No matching subscribers',
    17: 'No subscription existed',
    128: 'Unspecified error',
    129: 'Malformed Packet',
    130: 'Protocol Error',
    131: 'Implementation specific error',
    132: 'Unsupported Protocol Version',
    133: 'Client Identifier not valid',
    134: 'Bad User Name or Password',
    135: 'Not authorized',
    136: 'Server unavailable',
    137: 'Server busy',
    138: 'Banned',
    139: 'Server shutting down',
    140: 'Bad authentication method',
    141: 'Keep Alive timeout',
    142: 'Session taken over',
    143: 'Topic Filter invalid',
    144: 'Topic Name invalid',
    145: 'Packet identifier in use',
    146: 'Packet Identifier not found',
    147: 'Receive Maximum exceeded',
    148: 'Topic Alias invalid',
    149: 'Packet too large',
    150: 'Message rate too high',
    151: 'Quota exceeded',
    152: 'Administrative action',
    153: 'Payload format invalid',
    154: 'Retain not supported',
    155: 'QoS not supported',
    156: 'Use another server',
    157: 'Server moved',
    158: 'Shared Subscriptions not supported',
    159: 'Connection rate exceeded',
    160: 'Maximum connect time',
    161: 'Subscription Identifiers not supported',
    162: 'Wildcard Subscriptions not supported'
};
const handleAck = (client, packet)=>{
    const { messageId } = packet;
    const type = packet.cmd;
    let response = null;
    const cb = client.outgoing[messageId] ? client.outgoing[messageId].cb : null;
    let err = null;
    if (!cb) {
        client.log('_handleAck :: Server sent an ack in error. Ignoring.');
        return;
    }
    client.log('_handleAck :: packet type', type);
    switch(type){
        case 'pubcomp':
        case 'puback':
            {
                const pubackRC = packet.reasonCode;
                if (pubackRC && pubackRC > 0 && pubackRC !== 16) {
                    err = new shared_1.ErrorWithReasonCode(`Publish error: ${exports.ReasonCodes[pubackRC]}`, pubackRC);
                    client['_removeOutgoingAndStoreMessage'](messageId, ()=>{
                        cb(err, packet);
                    });
                } else {
                    client['_removeOutgoingAndStoreMessage'](messageId, cb);
                }
                break;
            }
        case 'pubrec':
            {
                response = {
                    cmd: 'pubrel',
                    qos: 2,
                    messageId
                };
                const pubrecRC = packet.reasonCode;
                if (pubrecRC && pubrecRC > 0 && pubrecRC !== 16) {
                    err = new shared_1.ErrorWithReasonCode(`Publish error: ${exports.ReasonCodes[pubrecRC]}`, pubrecRC);
                    client['_removeOutgoingAndStoreMessage'](messageId, ()=>{
                        cb(err, packet);
                    });
                } else {
                    client['_sendPacket'](response);
                }
                break;
            }
        case 'suback':
            {
                delete client.outgoing[messageId];
                client.messageIdProvider.deallocate(messageId);
                const granted = packet.granted;
                for(let grantedI = 0; grantedI < granted.length; grantedI++){
                    const subackRC = granted[grantedI];
                    if ((subackRC & 0x80) !== 0) {
                        err = new Error(`Subscribe error: ${exports.ReasonCodes[subackRC]}`);
                        err.code = subackRC;
                        const topics = client.messageIdToTopic[messageId];
                        if (topics) {
                            topics.forEach((topic)=>{
                                delete client['_resubscribeTopics'][topic];
                            });
                        }
                    }
                }
                delete client.messageIdToTopic[messageId];
                client['_invokeStoreProcessingQueue']();
                cb(err, packet);
                break;
            }
        case 'unsuback':
            {
                delete client.outgoing[messageId];
                client.messageIdProvider.deallocate(messageId);
                client['_invokeStoreProcessingQueue']();
                cb(null, packet);
                break;
            }
        default:
            client.emit('error', new Error('unrecognized packet type'));
    }
    if (client.disconnecting && Object.keys(client.outgoing).length === 0) {
        client.emit('outgoingEmpty');
    }
};
exports.default = handleAck; //# sourceMappingURL=ack.js.map
}}),
"[project]/node_modules/mqtt/build/lib/handlers/auth.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const shared_1 = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/shared.js [app-ssr] (ecmascript)");
const ack_1 = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/handlers/ack.js [app-ssr] (ecmascript)");
const handleAuth = (client, packet)=>{
    const { options } = client;
    const version = options.protocolVersion;
    const rc = version === 5 ? packet.reasonCode : packet.returnCode;
    if (version !== 5) {
        const err = new shared_1.ErrorWithReasonCode(`Protocol error: Auth packets are only supported in MQTT 5. Your version:${version}`, rc);
        client.emit('error', err);
        return;
    }
    client.handleAuth(packet, (err, packet2)=>{
        if (err) {
            client.emit('error', err);
            return;
        }
        if (rc === 24) {
            client.reconnecting = false;
            client['_sendPacket'](packet2);
        } else {
            const error = new shared_1.ErrorWithReasonCode(`Connection refused: ${ack_1.ReasonCodes[rc]}`, rc);
            client.emit('error', error);
        }
    });
};
exports.default = handleAuth; //# sourceMappingURL=auth.js.map
}}),
"[project]/node_modules/mqtt/build/lib/topic-alias-send.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const lru_cache_1 = __turbopack_context__.r("[project]/node_modules/lru-cache/dist/commonjs/index.js [app-ssr] (ecmascript)");
const number_allocator_1 = __turbopack_context__.r("[project]/node_modules/number-allocator/index.js [app-ssr] (ecmascript)");
class TopicAliasSend {
    constructor(max){
        if (max > 0) {
            this.aliasToTopic = new lru_cache_1.LRUCache({
                max
            });
            this.topicToAlias = {};
            this.numberAllocator = new number_allocator_1.NumberAllocator(1, max);
            this.max = max;
            this.length = 0;
        }
    }
    put(topic, alias) {
        if (alias === 0 || alias > this.max) {
            return false;
        }
        const entry = this.aliasToTopic.get(alias);
        if (entry) {
            delete this.topicToAlias[entry];
        }
        this.aliasToTopic.set(alias, topic);
        this.topicToAlias[topic] = alias;
        this.numberAllocator.use(alias);
        this.length = this.aliasToTopic.size;
        return true;
    }
    getTopicByAlias(alias) {
        return this.aliasToTopic.get(alias);
    }
    getAliasByTopic(topic) {
        const alias = this.topicToAlias[topic];
        if (typeof alias !== 'undefined') {
            this.aliasToTopic.get(alias);
        }
        return alias;
    }
    clear() {
        this.aliasToTopic.clear();
        this.topicToAlias = {};
        this.numberAllocator.clear();
        this.length = 0;
    }
    getLruAlias() {
        const alias = this.numberAllocator.firstVacant();
        if (alias) return alias;
        return [
            ...this.aliasToTopic.keys()
        ][this.aliasToTopic.size - 1];
    }
}
exports.default = TopicAliasSend; //# sourceMappingURL=topic-alias-send.js.map
}}),
"[project]/node_modules/mqtt/build/lib/handlers/connack.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const ack_1 = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/handlers/ack.js [app-ssr] (ecmascript)");
const topic_alias_send_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/topic-alias-send.js [app-ssr] (ecmascript)"));
const shared_1 = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/shared.js [app-ssr] (ecmascript)");
const handleConnack = (client, packet)=>{
    client.log('_handleConnack');
    const { options } = client;
    const version = options.protocolVersion;
    const rc = version === 5 ? packet.reasonCode : packet.returnCode;
    clearTimeout(client['connackTimer']);
    delete client['topicAliasSend'];
    if (packet.properties) {
        if (packet.properties.topicAliasMaximum) {
            if (packet.properties.topicAliasMaximum > 0xffff) {
                client.emit('error', new Error('topicAliasMaximum from broker is out of range'));
                return;
            }
            if (packet.properties.topicAliasMaximum > 0) {
                client['topicAliasSend'] = new topic_alias_send_1.default(packet.properties.topicAliasMaximum);
            }
        }
        if (packet.properties.serverKeepAlive && options.keepalive) {
            options.keepalive = packet.properties.serverKeepAlive;
        }
        if (packet.properties.maximumPacketSize) {
            if (!options.properties) {
                options.properties = {};
            }
            options.properties.maximumPacketSize = packet.properties.maximumPacketSize;
        }
    }
    if (rc === 0) {
        client.reconnecting = false;
        client['_onConnect'](packet);
    } else if (rc > 0) {
        const err = new shared_1.ErrorWithReasonCode(`Connection refused: ${ack_1.ReasonCodes[rc]}`, rc);
        client.emit('error', err);
        if (client.options.reconnectOnConnackError) {
            client['_cleanUp'](true);
        }
    }
};
exports.default = handleConnack; //# sourceMappingURL=connack.js.map
}}),
"[project]/node_modules/mqtt/build/lib/handlers/pubrel.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const handlePubrel = (client, packet, done)=>{
    client.log('handling pubrel packet');
    const callback = typeof done !== 'undefined' ? done : client.noop;
    const { messageId } = packet;
    const comp = {
        cmd: 'pubcomp',
        messageId
    };
    client.incomingStore.get(packet, (err, pub)=>{
        if (!err) {
            client.emit('message', pub.topic, pub.payload, pub);
            client.handleMessage(pub, (err2)=>{
                if (err2) {
                    return callback(err2);
                }
                client.incomingStore.del(pub, client.noop);
                client['_sendPacket'](comp, callback);
            });
        } else {
            client['_sendPacket'](comp, callback);
        }
    });
};
exports.default = handlePubrel; //# sourceMappingURL=pubrel.js.map
}}),
"[project]/node_modules/mqtt/build/lib/handlers/index.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const publish_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/handlers/publish.js [app-ssr] (ecmascript)"));
const auth_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/handlers/auth.js [app-ssr] (ecmascript)"));
const connack_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/handlers/connack.js [app-ssr] (ecmascript)"));
const ack_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/handlers/ack.js [app-ssr] (ecmascript)"));
const pubrel_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/handlers/pubrel.js [app-ssr] (ecmascript)"));
const handle = (client, packet, done)=>{
    const { options } = client;
    if (options.protocolVersion === 5 && options.properties && options.properties.maximumPacketSize && options.properties.maximumPacketSize < packet.length) {
        client.emit('error', new Error(`exceeding packets size ${packet.cmd}`));
        client.end({
            reasonCode: 149,
            properties: {
                reasonString: 'Maximum packet size was exceeded'
            }
        });
        return client;
    }
    client.log('_handlePacket :: emitting packetreceive');
    client.emit('packetreceive', packet);
    switch(packet.cmd){
        case 'publish':
            (0, publish_1.default)(client, packet, done);
            break;
        case 'puback':
        case 'pubrec':
        case 'pubcomp':
        case 'suback':
        case 'unsuback':
            client.reschedulePing();
            (0, ack_1.default)(client, packet);
            done();
            break;
        case 'pubrel':
            client.reschedulePing();
            (0, pubrel_1.default)(client, packet, done);
            break;
        case 'connack':
            (0, connack_1.default)(client, packet);
            done();
            break;
        case 'auth':
            client.reschedulePing();
            (0, auth_1.default)(client, packet);
            done();
            break;
        case 'pingresp':
            client.log('_handlePacket :: received pingresp');
            client.reschedulePing(true);
            done();
            break;
        case 'disconnect':
            client.emit('disconnect', packet);
            done();
            break;
        default:
            client.log('_handlePacket :: unknown command');
            done();
            break;
    }
};
exports.default = handle; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/mqtt/build/lib/TypedEmitter.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TypedEventEmitter = void 0;
const events_1 = __importDefault(__turbopack_context__.r("[externals]/events [external] (events, cjs)"));
const shared_1 = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/shared.js [app-ssr] (ecmascript)");
class TypedEventEmitter {
}
exports.TypedEventEmitter = TypedEventEmitter;
(0, shared_1.applyMixin)(TypedEventEmitter, events_1.default); //# sourceMappingURL=TypedEmitter.js.map
}}),
"[project]/node_modules/mqtt/build/lib/is-browser.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isReactNativeBrowser = exports.isWebWorker = void 0;
const isStandardBrowserEnv = ()=>{
    var _a;
    if (typeof window !== 'undefined') {
        const electronRenderCheck = typeof navigator !== 'undefined' && ((_a = navigator.userAgent) === null || _a === void 0 ? void 0 : _a.toLowerCase().indexOf(' electron/')) > -1;
        if (electronRenderCheck && (process === null || process === void 0 ? void 0 : process.versions)) {
            const electronMainCheck = Object.prototype.hasOwnProperty.call(process.versions, 'electron');
            return !electronMainCheck;
        }
        return typeof window.document !== 'undefined';
    }
    return false;
};
const isWebWorkerEnv = ()=>{
    var _a, _b;
    return Boolean(typeof self === 'object' && ((_b = (_a = self === null || self === void 0 ? void 0 : self.constructor) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.includes('WorkerGlobalScope')));
};
const isReactNativeEnv = ()=>typeof navigator !== 'undefined' && navigator.product === 'ReactNative';
const isBrowser = isStandardBrowserEnv() || isWebWorkerEnv() || isReactNativeEnv();
exports.isWebWorker = isWebWorkerEnv();
exports.isReactNativeBrowser = isReactNativeEnv();
exports.default = isBrowser; //# sourceMappingURL=is-browser.js.map
}}),
"[project]/node_modules/mqtt/build/lib/get-timer.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function() {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o) {
            var ar = [];
            for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
            for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
const is_browser_1 = __importStar(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/is-browser.js [app-ssr] (ecmascript)"));
const worker_timers_1 = __turbopack_context__.r("[project]/node_modules/worker-timers/build/es2019/module.js [app-ssr] (ecmascript)");
const workerTimer = {
    set: worker_timers_1.setInterval,
    clear: worker_timers_1.clearInterval
};
const nativeTimer = {
    set: (func, time)=>setInterval(func, time),
    clear: (timerId)=>clearInterval(timerId)
};
const getTimer = (variant)=>{
    switch(variant){
        case 'native':
            {
                return nativeTimer;
            }
        case 'worker':
            {
                return workerTimer;
            }
        case 'auto':
        default:
            {
                return is_browser_1.default && !is_browser_1.isWebWorker && !is_browser_1.isReactNativeBrowser ? workerTimer : nativeTimer;
            }
    }
};
exports.default = getTimer; //# sourceMappingURL=get-timer.js.map
}}),
"[project]/node_modules/mqtt/build/lib/KeepaliveManager.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const get_timer_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/get-timer.js [app-ssr] (ecmascript)"));
class KeepaliveManager {
    get keepaliveTimeoutTimestamp() {
        return this._keepaliveTimeoutTimestamp;
    }
    get intervalEvery() {
        return this._intervalEvery;
    }
    get keepalive() {
        return this._keepalive;
    }
    constructor(client, variant){
        this.destroyed = false;
        this.client = client;
        this.timer = typeof variant === 'object' && 'set' in variant && 'clear' in variant ? variant : (0, get_timer_1.default)(variant);
        this.setKeepalive(client.options.keepalive);
    }
    clear() {
        if (this.timerId) {
            this.timer.clear(this.timerId);
            this.timerId = null;
        }
    }
    setKeepalive(value) {
        value *= 1000;
        if (isNaN(value) || value <= 0 || value > 2147483647) {
            throw new Error(`Keepalive value must be an integer between 0 and 2147483647. Provided value is ${value}`);
        }
        this._keepalive = value;
        this.reschedule();
        this.client['log'](`KeepaliveManager: set keepalive to ${value}ms`);
    }
    destroy() {
        this.clear();
        this.destroyed = true;
    }
    reschedule() {
        if (this.destroyed) {
            return;
        }
        this.clear();
        this.counter = 0;
        const keepAliveTimeout = Math.ceil(this._keepalive * 1.5);
        this._keepaliveTimeoutTimestamp = Date.now() + keepAliveTimeout;
        this._intervalEvery = Math.ceil(this._keepalive / 2);
        this.timerId = this.timer.set(()=>{
            if (this.destroyed) {
                return;
            }
            this.counter += 1;
            if (this.counter === 2) {
                this.client.sendPing();
            } else if (this.counter > 2) {
                this.client.onKeepaliveTimeout();
            }
        }, this._intervalEvery);
    }
}
exports.default = KeepaliveManager; //# sourceMappingURL=KeepaliveManager.js.map
}}),
"[project]/node_modules/mqtt/build/lib/client.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function() {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o) {
            var ar = [];
            for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
            for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
    };
}();
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const topic_alias_recv_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/topic-alias-recv.js [app-ssr] (ecmascript)"));
const mqtt_packet_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt-packet/mqtt.js [app-ssr] (ecmascript)"));
const default_message_id_provider_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/default-message-id-provider.js [app-ssr] (ecmascript)"));
const readable_stream_1 = __turbopack_context__.r("[project]/node_modules/readable-stream/lib/ours/index.js [app-ssr] (ecmascript)");
const default_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/rfdc/default.js [app-ssr] (ecmascript)"));
const validations = __importStar(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/validations.js [app-ssr] (ecmascript)"));
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-ssr] (ecmascript)"));
const store_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/store.js [app-ssr] (ecmascript)"));
const handlers_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/handlers/index.js [app-ssr] (ecmascript)"));
const shared_1 = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/shared.js [app-ssr] (ecmascript)");
const TypedEmitter_1 = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/TypedEmitter.js [app-ssr] (ecmascript)");
const KeepaliveManager_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/KeepaliveManager.js [app-ssr] (ecmascript)"));
const is_browser_1 = __importStar(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/is-browser.js [app-ssr] (ecmascript)"));
const setImmediate = globalThis.setImmediate || ((...args)=>{
    const callback = args.shift();
    (0, shared_1.nextTick)(()=>{
        callback(...args);
    });
});
const defaultConnectOptions = {
    keepalive: 60,
    reschedulePings: true,
    protocolId: 'MQTT',
    protocolVersion: 4,
    reconnectPeriod: 1000,
    connectTimeout: 30 * 1000,
    clean: true,
    resubscribe: true,
    subscribeBatchSize: null,
    writeCache: true,
    timerVariant: 'auto'
};
class MqttClient extends TypedEmitter_1.TypedEventEmitter {
    static defaultId() {
        return `mqttjs_${Math.random().toString(16).substr(2, 8)}`;
    }
    constructor(streamBuilder, options){
        super();
        this.options = options || {};
        for(const k in defaultConnectOptions){
            if (typeof this.options[k] === 'undefined') {
                this.options[k] = defaultConnectOptions[k];
            } else {
                this.options[k] = options[k];
            }
        }
        this.log = this.options.log || (0, debug_1.default)('mqttjs:client');
        this.noop = this._noop.bind(this);
        this.log('MqttClient :: version:', MqttClient.VERSION);
        if (is_browser_1.isWebWorker) {
            this.log('MqttClient :: environment', 'webworker');
        } else {
            this.log('MqttClient :: environment', is_browser_1.default ? 'browser' : 'node');
        }
        this.log('MqttClient :: options.protocol', options.protocol);
        this.log('MqttClient :: options.protocolVersion', options.protocolVersion);
        this.log('MqttClient :: options.username', options.username);
        this.log('MqttClient :: options.keepalive', options.keepalive);
        this.log('MqttClient :: options.reconnectPeriod', options.reconnectPeriod);
        this.log('MqttClient :: options.rejectUnauthorized', options.rejectUnauthorized);
        this.log('MqttClient :: options.properties.topicAliasMaximum', options.properties ? options.properties.topicAliasMaximum : undefined);
        this.options.clientId = typeof options.clientId === 'string' ? options.clientId : MqttClient.defaultId();
        this.log('MqttClient :: clientId', this.options.clientId);
        this.options.customHandleAcks = options.protocolVersion === 5 && options.customHandleAcks ? options.customHandleAcks : (...args)=>{
            args[3](null, 0);
        };
        if (!this.options.writeCache) {
            mqtt_packet_1.default.writeToStream.cacheNumbers = false;
        }
        this.streamBuilder = streamBuilder;
        this.messageIdProvider = typeof this.options.messageIdProvider === 'undefined' ? new default_message_id_provider_1.default() : this.options.messageIdProvider;
        this.outgoingStore = options.outgoingStore || new store_1.default();
        this.incomingStore = options.incomingStore || new store_1.default();
        this.queueQoSZero = options.queueQoSZero === undefined ? true : options.queueQoSZero;
        this._resubscribeTopics = {};
        this.messageIdToTopic = {};
        this.keepaliveManager = null;
        this.connected = false;
        this.disconnecting = false;
        this.reconnecting = false;
        this.queue = [];
        this.connackTimer = null;
        this.reconnectTimer = null;
        this._storeProcessing = false;
        this._packetIdsDuringStoreProcessing = {};
        this._storeProcessingQueue = [];
        this.outgoing = {};
        this._firstConnection = true;
        if (options.properties && options.properties.topicAliasMaximum > 0) {
            if (options.properties.topicAliasMaximum > 0xffff) {
                this.log('MqttClient :: options.properties.topicAliasMaximum is out of range');
            } else {
                this.topicAliasRecv = new topic_alias_recv_1.default(options.properties.topicAliasMaximum);
            }
        }
        this.on('connect', ()=>{
            const { queue } = this;
            const deliver = ()=>{
                const entry = queue.shift();
                this.log('deliver :: entry %o', entry);
                let packet = null;
                if (!entry) {
                    this._resubscribe();
                    return;
                }
                packet = entry.packet;
                this.log('deliver :: call _sendPacket for %o', packet);
                let send = true;
                if (packet.messageId && packet.messageId !== 0) {
                    if (!this.messageIdProvider.register(packet.messageId)) {
                        send = false;
                    }
                }
                if (send) {
                    this._sendPacket(packet, (err)=>{
                        if (entry.cb) {
                            entry.cb(err);
                        }
                        deliver();
                    });
                } else {
                    this.log('messageId: %d has already used. The message is skipped and removed.', packet.messageId);
                    deliver();
                }
            };
            this.log('connect :: sending queued packets');
            deliver();
        });
        this.on('close', ()=>{
            this.log('close :: connected set to `false`');
            this.connected = false;
            this.log('close :: clearing connackTimer');
            clearTimeout(this.connackTimer);
            this._destroyKeepaliveManager();
            if (this.topicAliasRecv) {
                this.topicAliasRecv.clear();
            }
            this.log('close :: calling _setupReconnect');
            this._setupReconnect();
        });
        if (!this.options.manualConnect) {
            this.log('MqttClient :: setting up stream');
            this.connect();
        }
    }
    handleAuth(packet, callback) {
        callback();
    }
    handleMessage(packet, callback) {
        callback();
    }
    _nextId() {
        return this.messageIdProvider.allocate();
    }
    getLastMessageId() {
        return this.messageIdProvider.getLastAllocated();
    }
    connect() {
        var _a;
        const writable = new readable_stream_1.Writable();
        const parser = mqtt_packet_1.default.parser(this.options);
        let completeParse = null;
        const packets = [];
        this.log('connect :: calling method to clear reconnect');
        this._clearReconnect();
        if (this.disconnected && !this.reconnecting) {
            this.incomingStore = this.options.incomingStore || new store_1.default();
            this.outgoingStore = this.options.outgoingStore || new store_1.default();
            this.disconnecting = false;
            this.disconnected = false;
        }
        this.log('connect :: using streamBuilder provided to client to create stream');
        this.stream = this.streamBuilder(this);
        parser.on('packet', (packet)=>{
            this.log('parser :: on packet push to packets array.');
            packets.push(packet);
        });
        const work = ()=>{
            this.log('work :: getting next packet in queue');
            const packet = packets.shift();
            if (packet) {
                this.log('work :: packet pulled from queue');
                (0, handlers_1.default)(this, packet, nextTickWork);
            } else {
                this.log('work :: no packets in queue');
                const done = completeParse;
                completeParse = null;
                this.log('work :: done flag is %s', !!done);
                if (done) done();
            }
        };
        const nextTickWork = ()=>{
            if (packets.length) {
                (0, shared_1.nextTick)(work);
            } else {
                const done = completeParse;
                completeParse = null;
                done();
            }
        };
        writable._write = (buf, enc, done)=>{
            completeParse = done;
            this.log('writable stream :: parsing buffer');
            parser.parse(buf);
            work();
        };
        const streamErrorHandler = (error)=>{
            this.log('streamErrorHandler :: error', error.message);
            if (error.code) {
                this.log('streamErrorHandler :: emitting error');
                this.emit('error', error);
            } else {
                this.noop(error);
            }
        };
        this.log('connect :: pipe stream to writable stream');
        this.stream.pipe(writable);
        this.stream.on('error', streamErrorHandler);
        this.stream.on('close', ()=>{
            this.log('(%s)stream :: on close', this.options.clientId);
            this._flushVolatile();
            this.log('stream: emit close to MqttClient');
            this.emit('close');
        });
        this.log('connect: sending packet `connect`');
        const connectPacket = {
            cmd: 'connect',
            protocolId: this.options.protocolId,
            protocolVersion: this.options.protocolVersion,
            clean: this.options.clean,
            clientId: this.options.clientId,
            keepalive: this.options.keepalive,
            username: this.options.username,
            password: this.options.password,
            properties: this.options.properties
        };
        if (this.options.will) {
            connectPacket.will = Object.assign(Object.assign({}, this.options.will), {
                payload: (_a = this.options.will) === null || _a === void 0 ? void 0 : _a.payload
            });
        }
        if (this.topicAliasRecv) {
            if (!connectPacket.properties) {
                connectPacket.properties = {};
            }
            if (this.topicAliasRecv) {
                connectPacket.properties.topicAliasMaximum = this.topicAliasRecv.max;
            }
        }
        this._writePacket(connectPacket);
        parser.on('error', this.emit.bind(this, 'error'));
        if (this.options.properties) {
            if (!this.options.properties.authenticationMethod && this.options.properties.authenticationData) {
                this.end(()=>this.emit('error', new Error('Packet has no Authentication Method')));
                return this;
            }
            if (this.options.properties.authenticationMethod && this.options.authPacket && typeof this.options.authPacket === 'object') {
                const authPacket = Object.assign({
                    cmd: 'auth',
                    reasonCode: 0
                }, this.options.authPacket);
                this._writePacket(authPacket);
            }
        }
        this.stream.setMaxListeners(1000);
        clearTimeout(this.connackTimer);
        this.connackTimer = setTimeout(()=>{
            this.log('!!connectTimeout hit!! Calling _cleanUp with force `true`');
            this.emit('error', new Error('connack timeout'));
            this._cleanUp(true);
        }, this.options.connectTimeout);
        return this;
    }
    publish(topic, message, opts, callback) {
        this.log('publish :: message `%s` to topic `%s`', message, topic);
        const { options } = this;
        if (typeof opts === 'function') {
            callback = opts;
            opts = null;
        }
        opts = opts || {};
        const defaultOpts = {
            qos: 0,
            retain: false,
            dup: false
        };
        opts = Object.assign(Object.assign({}, defaultOpts), opts);
        const { qos, retain, dup, properties, cbStorePut } = opts;
        if (this._checkDisconnecting(callback)) {
            return this;
        }
        const publishProc = ()=>{
            let messageId = 0;
            if (qos === 1 || qos === 2) {
                messageId = this._nextId();
                if (messageId === null) {
                    this.log('No messageId left');
                    return false;
                }
            }
            const packet = {
                cmd: 'publish',
                topic,
                payload: message,
                qos,
                retain,
                messageId,
                dup
            };
            if (options.protocolVersion === 5) {
                packet.properties = properties;
            }
            this.log('publish :: qos', qos);
            switch(qos){
                case 1:
                case 2:
                    this.outgoing[packet.messageId] = {
                        volatile: false,
                        cb: callback || this.noop
                    };
                    this.log('MqttClient:publish: packet cmd: %s', packet.cmd);
                    this._sendPacket(packet, undefined, cbStorePut);
                    break;
                default:
                    this.log('MqttClient:publish: packet cmd: %s', packet.cmd);
                    this._sendPacket(packet, callback, cbStorePut);
                    break;
            }
            return true;
        };
        if (this._storeProcessing || this._storeProcessingQueue.length > 0 || !publishProc()) {
            this._storeProcessingQueue.push({
                invoke: publishProc,
                cbStorePut: opts.cbStorePut,
                callback
            });
        }
        return this;
    }
    publishAsync(topic, message, opts) {
        return new Promise((resolve, reject)=>{
            this.publish(topic, message, opts, (err, packet)=>{
                if (err) {
                    reject(err);
                } else {
                    resolve(packet);
                }
            });
        });
    }
    subscribe(topicObject, opts, callback) {
        const version = this.options.protocolVersion;
        if (typeof opts === 'function') {
            callback = opts;
        }
        callback = callback || this.noop;
        let resubscribe = false;
        let topicsList = [];
        if (typeof topicObject === 'string') {
            topicObject = [
                topicObject
            ];
            topicsList = topicObject;
        } else if (Array.isArray(topicObject)) {
            topicsList = topicObject;
        } else if (typeof topicObject === 'object') {
            resubscribe = topicObject.resubscribe;
            delete topicObject.resubscribe;
            topicsList = Object.keys(topicObject);
        }
        const invalidTopic = validations.validateTopics(topicsList);
        if (invalidTopic !== null) {
            setImmediate(callback, new Error(`Invalid topic ${invalidTopic}`));
            return this;
        }
        if (this._checkDisconnecting(callback)) {
            this.log('subscribe: discconecting true');
            return this;
        }
        const defaultOpts = {
            qos: 0
        };
        if (version === 5) {
            defaultOpts.nl = false;
            defaultOpts.rap = false;
            defaultOpts.rh = 0;
        }
        opts = Object.assign(Object.assign({}, defaultOpts), opts);
        const properties = opts.properties;
        const subs = [];
        const parseSub = (topic, subOptions)=>{
            subOptions = subOptions || opts;
            if (!Object.prototype.hasOwnProperty.call(this._resubscribeTopics, topic) || this._resubscribeTopics[topic].qos < subOptions.qos || resubscribe) {
                const currentOpts = {
                    topic,
                    qos: subOptions.qos
                };
                if (version === 5) {
                    currentOpts.nl = subOptions.nl;
                    currentOpts.rap = subOptions.rap;
                    currentOpts.rh = subOptions.rh;
                    currentOpts.properties = properties;
                }
                this.log('subscribe: pushing topic `%s` and qos `%s` to subs list', currentOpts.topic, currentOpts.qos);
                subs.push(currentOpts);
            }
        };
        if (Array.isArray(topicObject)) {
            topicObject.forEach((topic)=>{
                this.log('subscribe: array topic %s', topic);
                parseSub(topic);
            });
        } else {
            Object.keys(topicObject).forEach((topic)=>{
                this.log('subscribe: object topic %s, %o', topic, topicObject[topic]);
                parseSub(topic, topicObject[topic]);
            });
        }
        if (!subs.length) {
            callback(null, []);
            return this;
        }
        const subscribeChunkedSubs = (chunkedSubs, messageId)=>{
            const packet = {
                cmd: 'subscribe',
                subscriptions: chunkedSubs,
                messageId
            };
            if (properties) {
                packet.properties = properties;
            }
            if (this.options.resubscribe) {
                this.log('subscribe :: resubscribe true');
                const topics = [];
                chunkedSubs.forEach((sub)=>{
                    if (this.options.reconnectPeriod > 0) {
                        const topic = {
                            qos: sub.qos
                        };
                        if (version === 5) {
                            topic.nl = sub.nl || false;
                            topic.rap = sub.rap || false;
                            topic.rh = sub.rh || 0;
                            topic.properties = sub.properties;
                        }
                        this._resubscribeTopics[sub.topic] = topic;
                        topics.push(sub.topic);
                    }
                });
                this.messageIdToTopic[packet.messageId] = topics;
            }
            const promise = new Promise((resolve, reject)=>{
                this.outgoing[packet.messageId] = {
                    volatile: true,
                    cb (err, packet2) {
                        if (!err) {
                            const { granted } = packet2;
                            for(let grantedI = 0; grantedI < granted.length; grantedI += 1){
                                chunkedSubs[grantedI].qos = granted[grantedI];
                            }
                        }
                        if (!err) {
                            resolve(packet2);
                        } else {
                            reject(new shared_1.ErrorWithSubackPacket(err.message, packet2));
                        }
                    }
                };
            });
            this.log('subscribe :: call _sendPacket');
            this._sendPacket(packet);
            return promise;
        };
        const subscribeProc = ()=>{
            var _a;
            const batchSize = (_a = this.options.subscribeBatchSize) !== null && _a !== void 0 ? _a : subs.length;
            const subscribePromises = [];
            for(let i = 0; i < subs.length; i += batchSize){
                const chunkedSubs = subs.slice(i, i + batchSize);
                const messageId = this._nextId();
                if (messageId === null) {
                    this.log('No messageId left');
                    return false;
                }
                subscribePromises.push(subscribeChunkedSubs(chunkedSubs, messageId));
            }
            Promise.all(subscribePromises).then((packets)=>{
                callback(null, subs, packets.at(-1));
            }).catch((err)=>{
                callback(err, subs, err.packet);
            });
            return true;
        };
        if (this._storeProcessing || this._storeProcessingQueue.length > 0 || !subscribeProc()) {
            this._storeProcessingQueue.push({
                invoke: subscribeProc,
                callback
            });
        }
        return this;
    }
    subscribeAsync(topicObject, opts) {
        return new Promise((resolve, reject)=>{
            this.subscribe(topicObject, opts, (err, granted)=>{
                if (err) {
                    reject(err);
                } else {
                    resolve(granted);
                }
            });
        });
    }
    unsubscribe(topic, opts, callback) {
        if (typeof topic === 'string') {
            topic = [
                topic
            ];
        }
        if (typeof opts === 'function') {
            callback = opts;
        }
        callback = callback || this.noop;
        const invalidTopic = validations.validateTopics(topic);
        if (invalidTopic !== null) {
            setImmediate(callback, new Error(`Invalid topic ${invalidTopic}`));
            return this;
        }
        if (this._checkDisconnecting(callback)) {
            return this;
        }
        const unsubscribeProc = ()=>{
            const messageId = this._nextId();
            if (messageId === null) {
                this.log('No messageId left');
                return false;
            }
            const packet = {
                cmd: 'unsubscribe',
                messageId,
                unsubscriptions: []
            };
            if (typeof topic === 'string') {
                packet.unsubscriptions = [
                    topic
                ];
            } else if (Array.isArray(topic)) {
                packet.unsubscriptions = topic;
            }
            if (this.options.resubscribe) {
                packet.unsubscriptions.forEach((topic2)=>{
                    delete this._resubscribeTopics[topic2];
                });
            }
            if (typeof opts === 'object' && opts.properties) {
                packet.properties = opts.properties;
            }
            this.outgoing[packet.messageId] = {
                volatile: true,
                cb: callback
            };
            this.log('unsubscribe: call _sendPacket');
            this._sendPacket(packet);
            return true;
        };
        if (this._storeProcessing || this._storeProcessingQueue.length > 0 || !unsubscribeProc()) {
            this._storeProcessingQueue.push({
                invoke: unsubscribeProc,
                callback
            });
        }
        return this;
    }
    unsubscribeAsync(topic, opts) {
        return new Promise((resolve, reject)=>{
            this.unsubscribe(topic, opts, (err, packet)=>{
                if (err) {
                    reject(err);
                } else {
                    resolve(packet);
                }
            });
        });
    }
    end(force, opts, cb) {
        this.log('end :: (%s)', this.options.clientId);
        if (force == null || typeof force !== 'boolean') {
            cb = cb || opts;
            opts = force;
            force = false;
        }
        if (typeof opts !== 'object') {
            cb = cb || opts;
            opts = null;
        }
        this.log('end :: cb? %s', !!cb);
        if (!cb || typeof cb !== 'function') {
            cb = this.noop;
        }
        const closeStores = ()=>{
            this.log('end :: closeStores: closing incoming and outgoing stores');
            this.disconnected = true;
            this.incomingStore.close((e1)=>{
                this.outgoingStore.close((e2)=>{
                    this.log('end :: closeStores: emitting end');
                    this.emit('end');
                    if (cb) {
                        const err = e1 || e2;
                        this.log('end :: closeStores: invoking callback with args');
                        cb(err);
                    }
                });
            });
            if (this._deferredReconnect) {
                this._deferredReconnect();
            } else if (this.options.reconnectPeriod === 0 || this.options.manualConnect) {
                this.disconnecting = false;
            }
        };
        const finish = ()=>{
            this.log('end :: (%s) :: finish :: calling _cleanUp with force %s', this.options.clientId, force);
            this._cleanUp(force, ()=>{
                this.log('end :: finish :: calling process.nextTick on closeStores');
                (0, shared_1.nextTick)(closeStores);
            }, opts);
        };
        if (this.disconnecting) {
            cb();
            return this;
        }
        this._clearReconnect();
        this.disconnecting = true;
        if (!force && Object.keys(this.outgoing).length > 0) {
            this.log('end :: (%s) :: calling finish in 10ms once outgoing is empty', this.options.clientId);
            this.once('outgoingEmpty', setTimeout.bind(null, finish, 10));
        } else {
            this.log('end :: (%s) :: immediately calling finish', this.options.clientId);
            finish();
        }
        return this;
    }
    endAsync(force, opts) {
        return new Promise((resolve, reject)=>{
            this.end(force, opts, (err)=>{
                if (err) {
                    reject(err);
                } else {
                    resolve();
                }
            });
        });
    }
    removeOutgoingMessage(messageId) {
        if (this.outgoing[messageId]) {
            const { cb } = this.outgoing[messageId];
            this._removeOutgoingAndStoreMessage(messageId, ()=>{
                cb(new Error('Message removed'));
            });
        }
        return this;
    }
    reconnect(opts) {
        this.log('client reconnect');
        const f = ()=>{
            if (opts) {
                this.options.incomingStore = opts.incomingStore;
                this.options.outgoingStore = opts.outgoingStore;
            } else {
                this.options.incomingStore = null;
                this.options.outgoingStore = null;
            }
            this.incomingStore = this.options.incomingStore || new store_1.default();
            this.outgoingStore = this.options.outgoingStore || new store_1.default();
            this.disconnecting = false;
            this.disconnected = false;
            this._deferredReconnect = null;
            this._reconnect();
        };
        if (this.disconnecting && !this.disconnected) {
            this._deferredReconnect = f;
        } else {
            f();
        }
        return this;
    }
    _flushVolatile() {
        if (this.outgoing) {
            this.log('_flushVolatile :: deleting volatile messages from the queue and setting their callbacks as error function');
            Object.keys(this.outgoing).forEach((messageId)=>{
                if (this.outgoing[messageId].volatile && typeof this.outgoing[messageId].cb === 'function') {
                    this.outgoing[messageId].cb(new Error('Connection closed'));
                    delete this.outgoing[messageId];
                }
            });
        }
    }
    _flush() {
        if (this.outgoing) {
            this.log('_flush: queue exists? %b', !!this.outgoing);
            Object.keys(this.outgoing).forEach((messageId)=>{
                if (typeof this.outgoing[messageId].cb === 'function') {
                    this.outgoing[messageId].cb(new Error('Connection closed'));
                    delete this.outgoing[messageId];
                }
            });
        }
    }
    _removeTopicAliasAndRecoverTopicName(packet) {
        let alias;
        if (packet.properties) {
            alias = packet.properties.topicAlias;
        }
        let topic = packet.topic.toString();
        this.log('_removeTopicAliasAndRecoverTopicName :: alias %d, topic %o', alias, topic);
        if (topic.length === 0) {
            if (typeof alias === 'undefined') {
                return new Error('Unregistered Topic Alias');
            }
            topic = this.topicAliasSend.getTopicByAlias(alias);
            if (typeof topic === 'undefined') {
                return new Error('Unregistered Topic Alias');
            }
            packet.topic = topic;
        }
        if (alias) {
            delete packet.properties.topicAlias;
        }
    }
    _checkDisconnecting(callback) {
        if (this.disconnecting) {
            if (callback && callback !== this.noop) {
                callback(new Error('client disconnecting'));
            } else {
                this.emit('error', new Error('client disconnecting'));
            }
        }
        return this.disconnecting;
    }
    _reconnect() {
        this.log('_reconnect: emitting reconnect to client');
        this.emit('reconnect');
        if (this.connected) {
            this.end(()=>{
                this.connect();
            });
            this.log('client already connected. disconnecting first.');
        } else {
            this.log('_reconnect: calling connect');
            this.connect();
        }
    }
    _setupReconnect() {
        if (!this.disconnecting && !this.reconnectTimer && this.options.reconnectPeriod > 0) {
            if (!this.reconnecting) {
                this.log('_setupReconnect :: emit `offline` state');
                this.emit('offline');
                this.log('_setupReconnect :: set `reconnecting` to `true`');
                this.reconnecting = true;
            }
            this.log('_setupReconnect :: setting reconnectTimer for %d ms', this.options.reconnectPeriod);
            this.reconnectTimer = setInterval(()=>{
                this.log('reconnectTimer :: reconnect triggered!');
                this._reconnect();
            }, this.options.reconnectPeriod);
        } else {
            this.log('_setupReconnect :: doing nothing...');
        }
    }
    _clearReconnect() {
        this.log('_clearReconnect : clearing reconnect timer');
        if (this.reconnectTimer) {
            clearInterval(this.reconnectTimer);
            this.reconnectTimer = null;
        }
    }
    _cleanUp(forced, done, opts = {}) {
        if (done) {
            this.log('_cleanUp :: done callback provided for on stream close');
            this.stream.on('close', done);
        }
        this.log('_cleanUp :: forced? %s', forced);
        if (forced) {
            if (this.options.reconnectPeriod === 0 && this.options.clean) {
                this._flush();
            }
            this.log('_cleanUp :: (%s) :: destroying stream', this.options.clientId);
            this.stream.destroy();
        } else {
            const packet = Object.assign({
                cmd: 'disconnect'
            }, opts);
            this.log('_cleanUp :: (%s) :: call _sendPacket with disconnect packet', this.options.clientId);
            this._sendPacket(packet, ()=>{
                this.log('_cleanUp :: (%s) :: destroying stream', this.options.clientId);
                setImmediate(()=>{
                    this.stream.end(()=>{
                        this.log('_cleanUp :: (%s) :: stream destroyed', this.options.clientId);
                    });
                });
            });
        }
        if (!this.disconnecting && !this.reconnecting) {
            this.log('_cleanUp :: client not disconnecting/reconnecting. Clearing and resetting reconnect.');
            this._clearReconnect();
            this._setupReconnect();
        }
        this._destroyKeepaliveManager();
        if (done && !this.connected) {
            this.log('_cleanUp :: (%s) :: removing stream `done` callback `close` listener', this.options.clientId);
            this.stream.removeListener('close', done);
            done();
        }
    }
    _storeAndSend(packet, cb, cbStorePut) {
        this.log('storeAndSend :: store packet with cmd %s to outgoingStore', packet.cmd);
        let storePacket = packet;
        let err;
        if (storePacket.cmd === 'publish') {
            storePacket = (0, default_1.default)(packet);
            err = this._removeTopicAliasAndRecoverTopicName(storePacket);
            if (err) {
                return cb && cb(err);
            }
        }
        this.outgoingStore.put(storePacket, (err2)=>{
            if (err2) {
                return cb && cb(err2);
            }
            cbStorePut();
            this._writePacket(packet, cb);
        });
    }
    _applyTopicAlias(packet) {
        if (this.options.protocolVersion === 5) {
            if (packet.cmd === 'publish') {
                let alias;
                if (packet.properties) {
                    alias = packet.properties.topicAlias;
                }
                const topic = packet.topic.toString();
                if (this.topicAliasSend) {
                    if (alias) {
                        if (topic.length !== 0) {
                            this.log('applyTopicAlias :: register topic: %s - alias: %d', topic, alias);
                            if (!this.topicAliasSend.put(topic, alias)) {
                                this.log('applyTopicAlias :: error out of range. topic: %s - alias: %d', topic, alias);
                                return new Error('Sending Topic Alias out of range');
                            }
                        }
                    } else if (topic.length !== 0) {
                        if (this.options.autoAssignTopicAlias) {
                            alias = this.topicAliasSend.getAliasByTopic(topic);
                            if (alias) {
                                packet.topic = '';
                                packet.properties = Object.assign(Object.assign({}, packet.properties), {
                                    topicAlias: alias
                                });
                                this.log('applyTopicAlias :: auto assign(use) topic: %s - alias: %d', topic, alias);
                            } else {
                                alias = this.topicAliasSend.getLruAlias();
                                this.topicAliasSend.put(topic, alias);
                                packet.properties = Object.assign(Object.assign({}, packet.properties), {
                                    topicAlias: alias
                                });
                                this.log('applyTopicAlias :: auto assign topic: %s - alias: %d', topic, alias);
                            }
                        } else if (this.options.autoUseTopicAlias) {
                            alias = this.topicAliasSend.getAliasByTopic(topic);
                            if (alias) {
                                packet.topic = '';
                                packet.properties = Object.assign(Object.assign({}, packet.properties), {
                                    topicAlias: alias
                                });
                                this.log('applyTopicAlias :: auto use topic: %s - alias: %d', topic, alias);
                            }
                        }
                    }
                } else if (alias) {
                    this.log('applyTopicAlias :: error out of range. topic: %s - alias: %d', topic, alias);
                    return new Error('Sending Topic Alias out of range');
                }
            }
        }
    }
    _noop(err) {
        this.log('noop ::', err);
    }
    _writePacket(packet, cb) {
        this.log('_writePacket :: packet: %O', packet);
        this.log('_writePacket :: emitting `packetsend`');
        this.emit('packetsend', packet);
        this.log('_writePacket :: writing to stream');
        const result = mqtt_packet_1.default.writeToStream(packet, this.stream, this.options);
        this.log('_writePacket :: writeToStream result %s', result);
        if (!result && cb && cb !== this.noop) {
            this.log('_writePacket :: handle events on `drain` once through callback.');
            this.stream.once('drain', cb);
        } else if (cb) {
            this.log('_writePacket :: invoking cb');
            cb();
        }
    }
    _sendPacket(packet, cb, cbStorePut, noStore) {
        this.log('_sendPacket :: (%s) ::  start', this.options.clientId);
        cbStorePut = cbStorePut || this.noop;
        cb = cb || this.noop;
        const err = this._applyTopicAlias(packet);
        if (err) {
            cb(err);
            return;
        }
        if (!this.connected) {
            if (packet.cmd === 'auth') {
                this._writePacket(packet, cb);
                return;
            }
            this.log('_sendPacket :: client not connected. Storing packet offline.');
            this._storePacket(packet, cb, cbStorePut);
            return;
        }
        if (noStore) {
            this._writePacket(packet, cb);
            return;
        }
        switch(packet.cmd){
            case 'publish':
                break;
            case 'pubrel':
                this._storeAndSend(packet, cb, cbStorePut);
                return;
            default:
                this._writePacket(packet, cb);
                return;
        }
        switch(packet.qos){
            case 2:
            case 1:
                this._storeAndSend(packet, cb, cbStorePut);
                break;
            case 0:
            default:
                this._writePacket(packet, cb);
                break;
        }
        this.log('_sendPacket :: (%s) ::  end', this.options.clientId);
    }
    _storePacket(packet, cb, cbStorePut) {
        this.log('_storePacket :: packet: %o', packet);
        this.log('_storePacket :: cb? %s', !!cb);
        cbStorePut = cbStorePut || this.noop;
        let storePacket = packet;
        if (storePacket.cmd === 'publish') {
            storePacket = (0, default_1.default)(packet);
            const err = this._removeTopicAliasAndRecoverTopicName(storePacket);
            if (err) {
                return cb && cb(err);
            }
        }
        const qos = storePacket.qos || 0;
        if (qos === 0 && this.queueQoSZero || storePacket.cmd !== 'publish') {
            this.queue.push({
                packet: storePacket,
                cb
            });
        } else if (qos > 0) {
            cb = this.outgoing[storePacket.messageId] ? this.outgoing[storePacket.messageId].cb : null;
            this.outgoingStore.put(storePacket, (err)=>{
                if (err) {
                    return cb && cb(err);
                }
                cbStorePut();
            });
        } else if (cb) {
            cb(new Error('No connection to broker'));
        }
    }
    _setupKeepaliveManager() {
        this.log('_setupKeepaliveManager :: keepalive %d (seconds)', this.options.keepalive);
        if (!this.keepaliveManager && this.options.keepalive) {
            this.keepaliveManager = new KeepaliveManager_1.default(this, this.options.timerVariant);
        }
    }
    _destroyKeepaliveManager() {
        if (this.keepaliveManager) {
            this.log('_destroyKeepaliveManager :: destroying keepalive manager');
            this.keepaliveManager.destroy();
            this.keepaliveManager = null;
        }
    }
    reschedulePing(force = false) {
        if (this.keepaliveManager && this.options.keepalive && (force || this.options.reschedulePings)) {
            this._reschedulePing();
        }
    }
    _reschedulePing() {
        this.log('_reschedulePing :: rescheduling ping');
        this.keepaliveManager.reschedule();
    }
    sendPing() {
        this.log('_sendPing :: sending pingreq');
        this._sendPacket({
            cmd: 'pingreq'
        });
    }
    onKeepaliveTimeout() {
        this.emit('error', new Error('Keepalive timeout'));
        this.log('onKeepaliveTimeout :: calling _cleanUp with force true');
        this._cleanUp(true);
    }
    _resubscribe() {
        this.log('_resubscribe');
        const _resubscribeTopicsKeys = Object.keys(this._resubscribeTopics);
        if (!this._firstConnection && (this.options.clean || this.options.protocolVersion >= 4 && !this.connackPacket.sessionPresent) && _resubscribeTopicsKeys.length > 0) {
            if (this.options.resubscribe) {
                if (this.options.protocolVersion === 5) {
                    this.log('_resubscribe: protocolVersion 5');
                    for(let topicI = 0; topicI < _resubscribeTopicsKeys.length; topicI++){
                        const resubscribeTopic = {};
                        resubscribeTopic[_resubscribeTopicsKeys[topicI]] = this._resubscribeTopics[_resubscribeTopicsKeys[topicI]];
                        resubscribeTopic.resubscribe = true;
                        this.subscribe(resubscribeTopic, {
                            properties: resubscribeTopic[_resubscribeTopicsKeys[topicI]].properties
                        });
                    }
                } else {
                    this._resubscribeTopics.resubscribe = true;
                    this.subscribe(this._resubscribeTopics);
                }
            } else {
                this._resubscribeTopics = {};
            }
        }
        this._firstConnection = false;
    }
    _onConnect(packet) {
        if (this.disconnected) {
            this.emit('connect', packet);
            return;
        }
        this.connackPacket = packet;
        this.messageIdProvider.clear();
        this._setupKeepaliveManager();
        this.connected = true;
        const startStreamProcess = ()=>{
            let outStore = this.outgoingStore.createStream();
            const remove = ()=>{
                outStore.destroy();
                outStore = null;
                this._flushStoreProcessingQueue();
                clearStoreProcessing();
            };
            const clearStoreProcessing = ()=>{
                this._storeProcessing = false;
                this._packetIdsDuringStoreProcessing = {};
            };
            this.once('close', remove);
            outStore.on('error', (err)=>{
                clearStoreProcessing();
                this._flushStoreProcessingQueue();
                this.removeListener('close', remove);
                this.emit('error', err);
            });
            const storeDeliver = ()=>{
                if (!outStore) {
                    return;
                }
                const packet2 = outStore.read(1);
                let cb;
                if (!packet2) {
                    outStore.once('readable', storeDeliver);
                    return;
                }
                this._storeProcessing = true;
                if (this._packetIdsDuringStoreProcessing[packet2.messageId]) {
                    storeDeliver();
                    return;
                }
                if (!this.disconnecting && !this.reconnectTimer) {
                    cb = this.outgoing[packet2.messageId] ? this.outgoing[packet2.messageId].cb : null;
                    this.outgoing[packet2.messageId] = {
                        volatile: false,
                        cb (err, status) {
                            if (cb) {
                                cb(err, status);
                            }
                            storeDeliver();
                        }
                    };
                    this._packetIdsDuringStoreProcessing[packet2.messageId] = true;
                    if (this.messageIdProvider.register(packet2.messageId)) {
                        this._sendPacket(packet2, undefined, undefined, true);
                    } else {
                        this.log('messageId: %d has already used.', packet2.messageId);
                    }
                } else if (outStore.destroy) {
                    outStore.destroy();
                }
            };
            outStore.on('end', ()=>{
                let allProcessed = true;
                for(const id in this._packetIdsDuringStoreProcessing){
                    if (!this._packetIdsDuringStoreProcessing[id]) {
                        allProcessed = false;
                        break;
                    }
                }
                this.removeListener('close', remove);
                if (allProcessed) {
                    clearStoreProcessing();
                    this._invokeAllStoreProcessingQueue();
                    this.emit('connect', packet);
                } else {
                    startStreamProcess();
                }
            });
            storeDeliver();
        };
        startStreamProcess();
    }
    _invokeStoreProcessingQueue() {
        if (!this._storeProcessing && this._storeProcessingQueue.length > 0) {
            const f = this._storeProcessingQueue[0];
            if (f && f.invoke()) {
                this._storeProcessingQueue.shift();
                return true;
            }
        }
        return false;
    }
    _invokeAllStoreProcessingQueue() {
        while(this._invokeStoreProcessingQueue()){}
    }
    _flushStoreProcessingQueue() {
        for (const f of this._storeProcessingQueue){
            if (f.cbStorePut) f.cbStorePut(new Error('Connection closed'));
            if (f.callback) f.callback(new Error('Connection closed'));
        }
        this._storeProcessingQueue.splice(0);
    }
    _removeOutgoingAndStoreMessage(messageId, cb) {
        delete this.outgoing[messageId];
        this.outgoingStore.del({
            messageId
        }, (err, packet)=>{
            cb(err, packet);
            this.messageIdProvider.deallocate(messageId);
            this._invokeStoreProcessingQueue();
        });
    }
}
MqttClient.VERSION = shared_1.MQTTJS_VERSION;
exports.default = MqttClient; //# sourceMappingURL=client.js.map
}}),
"[project]/node_modules/mqtt/build/lib/unique-message-id-provider.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const number_allocator_1 = __turbopack_context__.r("[project]/node_modules/number-allocator/index.js [app-ssr] (ecmascript)");
class UniqueMessageIdProvider {
    constructor(){
        this.numberAllocator = new number_allocator_1.NumberAllocator(1, 65535);
    }
    allocate() {
        this.lastId = this.numberAllocator.alloc();
        return this.lastId;
    }
    getLastAllocated() {
        return this.lastId;
    }
    register(messageId) {
        return this.numberAllocator.use(messageId);
    }
    deallocate(messageId) {
        this.numberAllocator.free(messageId);
    }
    clear() {
        this.numberAllocator.clear();
    }
}
exports.default = UniqueMessageIdProvider; //# sourceMappingURL=unique-message-id-provider.js.map
}}),
"[project]/node_modules/mqtt/build/lib/BufferedDuplex.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BufferedDuplex = void 0;
exports.writev = writev;
const readable_stream_1 = __turbopack_context__.r("[project]/node_modules/readable-stream/lib/ours/index.js [app-ssr] (ecmascript)");
const buffer_1 = __turbopack_context__.r("[externals]/buffer [external] (buffer, cjs)");
function writev(chunks, cb) {
    const buffers = new Array(chunks.length);
    for(let i = 0; i < chunks.length; i++){
        if (typeof chunks[i].chunk === 'string') {
            buffers[i] = buffer_1.Buffer.from(chunks[i].chunk, 'utf8');
        } else {
            buffers[i] = chunks[i].chunk;
        }
    }
    this._write(buffer_1.Buffer.concat(buffers), 'binary', cb);
}
class BufferedDuplex extends readable_stream_1.Duplex {
    constructor(opts, proxy, socket){
        super({
            objectMode: true
        });
        this.proxy = proxy;
        this.socket = socket;
        this.writeQueue = [];
        if (!opts.objectMode) {
            this._writev = writev.bind(this);
        }
        this.isSocketOpen = false;
        this.proxy.on('data', (chunk)=>{
            if (!this.destroyed && this.readable) {
                this.push(chunk);
            }
        });
    }
    _read(size) {
        this.proxy.read(size);
    }
    _write(chunk, encoding, cb) {
        if (!this.isSocketOpen) {
            this.writeQueue.push({
                chunk,
                encoding,
                cb
            });
        } else {
            this.writeToProxy(chunk, encoding, cb);
        }
    }
    _final(callback) {
        this.writeQueue = [];
        this.proxy.end(callback);
    }
    _destroy(err, callback) {
        this.writeQueue = [];
        this.proxy.destroy();
        callback(err);
    }
    socketReady() {
        this.emit('connect');
        this.isSocketOpen = true;
        this.processWriteQueue();
    }
    writeToProxy(chunk, encoding, cb) {
        if (this.proxy.write(chunk, encoding) === false) {
            this.proxy.once('drain', cb);
        } else {
            cb();
        }
    }
    processWriteQueue() {
        while(this.writeQueue.length > 0){
            const { chunk, encoding, cb } = this.writeQueue.shift();
            this.writeToProxy(chunk, encoding, cb);
        }
    }
}
exports.BufferedDuplex = BufferedDuplex; //# sourceMappingURL=BufferedDuplex.js.map
}}),
"[project]/node_modules/mqtt/build/lib/connect/ws.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.streamBuilder = exports.browserStreamBuilder = void 0;
const buffer_1 = __turbopack_context__.r("[externals]/buffer [external] (buffer, cjs)");
const ws_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/ws/index.js [app-ssr] (ecmascript)"));
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-ssr] (ecmascript)"));
const readable_stream_1 = __turbopack_context__.r("[project]/node_modules/readable-stream/lib/ours/index.js [app-ssr] (ecmascript)");
const is_browser_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/is-browser.js [app-ssr] (ecmascript)"));
const BufferedDuplex_1 = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/BufferedDuplex.js [app-ssr] (ecmascript)");
const debug = (0, debug_1.default)('mqttjs:ws');
const WSS_OPTIONS = [
    'rejectUnauthorized',
    'ca',
    'cert',
    'key',
    'pfx',
    'passphrase'
];
function buildUrl(opts, client) {
    let url = `${opts.protocol}://${opts.hostname}:${opts.port}${opts.path}`;
    if (typeof opts.transformWsUrl === 'function') {
        url = opts.transformWsUrl(url, opts, client);
    }
    return url;
}
function setDefaultOpts(opts) {
    const options = opts;
    if (!opts.port) {
        if (opts.protocol === 'wss') {
            options.port = 443;
        } else {
            options.port = 80;
        }
    }
    if (!opts.path) {
        options.path = '/';
    }
    if (!opts.wsOptions) {
        options.wsOptions = {};
    }
    if (!is_browser_1.default && !opts.forceNativeWebSocket && opts.protocol === 'wss') {
        WSS_OPTIONS.forEach((prop)=>{
            if (Object.prototype.hasOwnProperty.call(opts, prop) && !Object.prototype.hasOwnProperty.call(opts.wsOptions, prop)) {
                options.wsOptions[prop] = opts[prop];
            }
        });
    }
    return options;
}
function setDefaultBrowserOpts(opts) {
    const options = setDefaultOpts(opts);
    if (!options.hostname) {
        options.hostname = options.host;
    }
    if (!options.hostname) {
        if (typeof document === 'undefined') {
            throw new Error('Could not determine host. Specify host manually.');
        }
        const parsed = new URL(document.URL);
        options.hostname = parsed.hostname;
        if (!options.port) {
            options.port = Number(parsed.port);
        }
    }
    if (options.objectMode === undefined) {
        options.objectMode = !(options.binary === true || options.binary === undefined);
    }
    return options;
}
function createWebSocket(client, url, opts) {
    debug('createWebSocket');
    debug(`protocol: ${opts.protocolId} ${opts.protocolVersion}`);
    const websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';
    debug(`creating new Websocket for url: ${url} and protocol: ${websocketSubProtocol}`);
    let socket;
    if (opts.createWebsocket) {
        socket = opts.createWebsocket(url, [
            websocketSubProtocol
        ], opts);
    } else {
        socket = new ws_1.default(url, [
            websocketSubProtocol
        ], opts.wsOptions);
    }
    return socket;
}
function createBrowserWebSocket(client, opts) {
    const websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';
    const url = buildUrl(opts, client);
    let socket;
    if (opts.createWebsocket) {
        socket = opts.createWebsocket(url, [
            websocketSubProtocol
        ], opts);
    } else {
        socket = new WebSocket(url, [
            websocketSubProtocol
        ]);
    }
    socket.binaryType = 'arraybuffer';
    return socket;
}
const streamBuilder = (client, opts)=>{
    debug('streamBuilder');
    const options = setDefaultOpts(opts);
    options.hostname = options.hostname || options.host || 'localhost';
    const url = buildUrl(options, client);
    const socket = createWebSocket(client, url, options);
    const webSocketStream = ws_1.default.createWebSocketStream(socket, options.wsOptions);
    webSocketStream['url'] = url;
    socket.on('close', ()=>{
        webSocketStream.destroy();
    });
    return webSocketStream;
};
exports.streamBuilder = streamBuilder;
const browserStreamBuilder = (client, opts)=>{
    debug('browserStreamBuilder');
    let stream;
    const options = setDefaultBrowserOpts(opts);
    const bufferSize = options.browserBufferSize || 1024 * 512;
    const bufferTimeout = opts.browserBufferTimeout || 1000;
    const coerceToBuffer = !opts.objectMode;
    const socket = createBrowserWebSocket(client, opts);
    const proxy = buildProxy(opts, socketWriteBrowser, socketEndBrowser);
    if (!opts.objectMode) {
        proxy._writev = BufferedDuplex_1.writev.bind(proxy);
    }
    proxy.on('close', ()=>{
        socket.close();
    });
    const eventListenerSupport = typeof socket.addEventListener !== 'undefined';
    if (socket.readyState === socket.OPEN) {
        stream = proxy;
        stream.socket = socket;
    } else {
        stream = new BufferedDuplex_1.BufferedDuplex(opts, proxy, socket);
        if (eventListenerSupport) {
            socket.addEventListener('open', onOpen);
        } else {
            socket.onopen = onOpen;
        }
    }
    if (eventListenerSupport) {
        socket.addEventListener('close', onClose);
        socket.addEventListener('error', onError);
        socket.addEventListener('message', onMessage);
    } else {
        socket.onclose = onClose;
        socket.onerror = onError;
        socket.onmessage = onMessage;
    }
    function buildProxy(pOptions, socketWrite, socketEnd) {
        const _proxy = new readable_stream_1.Transform({
            objectMode: pOptions.objectMode
        });
        _proxy._write = socketWrite;
        _proxy._flush = socketEnd;
        return _proxy;
    }
    function onOpen() {
        debug('WebSocket onOpen');
        if (stream instanceof BufferedDuplex_1.BufferedDuplex) {
            stream.socketReady();
        }
    }
    function onClose(event) {
        debug('WebSocket onClose', event);
        stream.end();
        stream.destroy();
    }
    function onError(err) {
        debug('WebSocket onError', err);
        const error = new Error('WebSocket error');
        error['event'] = err;
        stream.destroy(error);
    }
    async function onMessage(event) {
        if (!proxy || proxy.destroyed || !proxy.readable) {
            return;
        }
        let { data } = event;
        if (data instanceof ArrayBuffer) data = buffer_1.Buffer.from(data);
        else if (data instanceof Blob) data = buffer_1.Buffer.from(await new Response(data).arrayBuffer());
        else data = buffer_1.Buffer.from(data, 'utf8');
        proxy.push(data);
    }
    function socketWriteBrowser(chunk, enc, next) {
        if (socket.bufferedAmount > bufferSize) {
            setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next);
            return;
        }
        if (coerceToBuffer && typeof chunk === 'string') {
            chunk = buffer_1.Buffer.from(chunk, 'utf8');
        }
        try {
            socket.send(chunk);
        } catch (err) {
            return next(err);
        }
        next();
    }
    function socketEndBrowser(done) {
        socket.close();
        done();
    }
    return stream;
};
exports.browserStreamBuilder = browserStreamBuilder; //# sourceMappingURL=ws.js.map
}}),
"[project]/node_modules/mqtt/build/lib/connect/wx.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const buffer_1 = __turbopack_context__.r("[externals]/buffer [external] (buffer, cjs)");
const readable_stream_1 = __turbopack_context__.r("[project]/node_modules/readable-stream/lib/ours/index.js [app-ssr] (ecmascript)");
const BufferedDuplex_1 = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/BufferedDuplex.js [app-ssr] (ecmascript)");
let socketTask;
let proxy;
let stream;
function buildProxy() {
    const _proxy = new readable_stream_1.Transform();
    _proxy._write = (chunk, encoding, next)=>{
        socketTask.send({
            data: chunk.buffer,
            success () {
                next();
            },
            fail (errMsg) {
                next(new Error(errMsg));
            }
        });
    };
    _proxy._flush = (done)=>{
        socketTask.close({
            success () {
                done();
            }
        });
    };
    return _proxy;
}
function setDefaultOpts(opts) {
    if (!opts.hostname) {
        opts.hostname = 'localhost';
    }
    if (!opts.path) {
        opts.path = '/';
    }
    if (!opts.wsOptions) {
        opts.wsOptions = {};
    }
}
function buildUrl(opts, client) {
    const protocol = opts.protocol === 'wxs' ? 'wss' : 'ws';
    let url = `${protocol}://${opts.hostname}${opts.path}`;
    if (opts.port && opts.port !== 80 && opts.port !== 443) {
        url = `${protocol}://${opts.hostname}:${opts.port}${opts.path}`;
    }
    if (typeof opts.transformWsUrl === 'function') {
        url = opts.transformWsUrl(url, opts, client);
    }
    return url;
}
function bindEventHandler() {
    socketTask.onOpen(()=>{
        stream.socketReady();
    });
    socketTask.onMessage((res)=>{
        let { data } = res;
        if (data instanceof ArrayBuffer) data = buffer_1.Buffer.from(data);
        else data = buffer_1.Buffer.from(data, 'utf8');
        proxy.push(data);
    });
    socketTask.onClose(()=>{
        stream.emit('close');
        stream.end();
        stream.destroy();
    });
    socketTask.onError((error)=>{
        const err = new Error(error.errMsg);
        stream.destroy(err);
    });
}
const buildStream = (client, opts)=>{
    opts.hostname = opts.hostname || opts.host;
    if (!opts.hostname) {
        throw new Error('Could not determine host. Specify host manually.');
    }
    const websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';
    setDefaultOpts(opts);
    const url = buildUrl(opts, client);
    socketTask = wx.connectSocket({
        url,
        protocols: [
            websocketSubProtocol
        ]
    });
    proxy = buildProxy();
    stream = new BufferedDuplex_1.BufferedDuplex(opts, proxy, socketTask);
    stream._destroy = (err, cb)=>{
        socketTask.close({
            success () {
                if (cb) cb(err);
            }
        });
    };
    const destroyRef = stream.destroy;
    stream.destroy = (err, cb)=>{
        stream.destroy = destroyRef;
        setTimeout(()=>{
            socketTask.close({
                fail () {
                    stream._destroy(err, cb);
                }
            });
        }, 0);
        return stream;
    };
    bindEventHandler();
    return stream;
};
exports.default = buildStream; //# sourceMappingURL=wx.js.map
}}),
"[project]/node_modules/mqtt/build/lib/connect/ali.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const buffer_1 = __turbopack_context__.r("[externals]/buffer [external] (buffer, cjs)");
const readable_stream_1 = __turbopack_context__.r("[project]/node_modules/readable-stream/lib/ours/index.js [app-ssr] (ecmascript)");
const BufferedDuplex_1 = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/BufferedDuplex.js [app-ssr] (ecmascript)");
let my;
let proxy;
let stream;
let isInitialized = false;
function buildProxy() {
    const _proxy = new readable_stream_1.Transform();
    _proxy._write = (chunk, encoding, next)=>{
        my.sendSocketMessage({
            data: chunk.buffer,
            success () {
                next();
            },
            fail () {
                next(new Error());
            }
        });
    };
    _proxy._flush = (done)=>{
        my.closeSocket({
            success () {
                done();
            }
        });
    };
    return _proxy;
}
function setDefaultOpts(opts) {
    if (!opts.hostname) {
        opts.hostname = 'localhost';
    }
    if (!opts.path) {
        opts.path = '/';
    }
    if (!opts.wsOptions) {
        opts.wsOptions = {};
    }
}
function buildUrl(opts, client) {
    const protocol = opts.protocol === 'alis' ? 'wss' : 'ws';
    let url = `${protocol}://${opts.hostname}${opts.path}`;
    if (opts.port && opts.port !== 80 && opts.port !== 443) {
        url = `${protocol}://${opts.hostname}:${opts.port}${opts.path}`;
    }
    if (typeof opts.transformWsUrl === 'function') {
        url = opts.transformWsUrl(url, opts, client);
    }
    return url;
}
function bindEventHandler() {
    if (isInitialized) return;
    isInitialized = true;
    my.onSocketOpen(()=>{
        stream.socketReady();
    });
    my.onSocketMessage((res)=>{
        if (typeof res.data === 'string') {
            const buffer = buffer_1.Buffer.from(res.data, 'base64');
            proxy.push(buffer);
        } else {
            const reader = new FileReader();
            reader.addEventListener('load', ()=>{
                let data = reader.result;
                if (data instanceof ArrayBuffer) data = buffer_1.Buffer.from(data);
                else data = buffer_1.Buffer.from(data, 'utf8');
                proxy.push(data);
            });
            reader.readAsArrayBuffer(res.data);
        }
    });
    my.onSocketClose(()=>{
        stream.end();
        stream.destroy();
    });
    my.onSocketError((err)=>{
        stream.destroy(err);
    });
}
const buildStream = (client, opts)=>{
    opts.hostname = opts.hostname || opts.host;
    if (!opts.hostname) {
        throw new Error('Could not determine host. Specify host manually.');
    }
    const websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';
    setDefaultOpts(opts);
    const url = buildUrl(opts, client);
    my = opts.my;
    my.connectSocket({
        url,
        protocols: websocketSubProtocol
    });
    proxy = buildProxy();
    stream = new BufferedDuplex_1.BufferedDuplex(opts, proxy, my);
    bindEventHandler();
    return stream;
};
exports.default = buildStream; //# sourceMappingURL=ali.js.map
}}),
"[project]/node_modules/mqtt/build/lib/connect/socks.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function() {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o) {
            var ar = [];
            for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
            for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
    };
}();
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = openSocks;
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-ssr] (ecmascript)"));
const stream_1 = __turbopack_context__.r("[externals]/stream [external] (stream, cjs)");
const socks_1 = __turbopack_context__.r("[project]/node_modules/socks/build/index.js [app-ssr] (ecmascript)");
const dns = __importStar(__turbopack_context__.r("[externals]/dns [external] (dns, cjs)"));
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const assert_1 = __importDefault(__turbopack_context__.r("[externals]/assert [external] (assert, cjs)"));
const debug = (0, debug_1.default)('mqttjs:socks');
class ProxyStream extends stream_1.Duplex {
    constructor(){
        super({
            autoDestroy: false
        });
        this._flowing = false;
        this._onData = (chunk)=>{
            (0, assert_1.default)(this._socket);
            this._flowing = this.push(chunk);
            if (!this._flowing) this._socket.pause();
        };
        this._onEnd = ()=>{
            debug('proxy stream received EOF');
            this.push(null);
        };
        this._onClose = ()=>{
            debug('proxy stream closed');
            this.destroy();
        };
        this._onError = (err)=>{
            debug('proxy stream died with error %s', err);
            this.destroy(err);
        };
        this.cork();
    }
    _start(socket) {
        debug('proxy stream started');
        (0, assert_1.default)(!this._socket);
        if (this.destroyed) {
            socket.destroy(this.errored);
            return;
        }
        this._socket = socket;
        if (!this._flowing) socket.pause();
        socket.on('data', this._onData);
        socket.on('end', this._onEnd);
        socket.on('error', this._onError);
        socket.on('close', this._onClose);
        socket.emit('connect');
        this.uncork();
    }
    _write(chunk, encoding, callback) {
        (0, assert_1.default)(this._socket);
        this._socket.write(chunk, callback);
    }
    _read(size) {
        var _a, _b;
        this._flowing = true;
        (_b = (_a = this._socket) === null || _a === void 0 ? void 0 : _a.resume) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
    _destroy(error, callback) {
        var _a, _b;
        (_b = (_a = this._socket) === null || _a === void 0 ? void 0 : _a.destroy) === null || _b === void 0 ? void 0 : _b.call(_a, error);
        callback(error);
    }
}
function fatal(e) {
    try {
        if (e.code === undefined) e.code = 'SOCKS';
        return e;
    } catch (_a) {
        return e;
    }
}
function typeFromProtocol(proto) {
    switch(proto){
        case 'socks5h:':
            return [
                5,
                true
            ];
        case 'socks4a:':
            return [
                4,
                true
            ];
        case 'socks5:':
            return [
                5,
                false
            ];
        case 'socks4:':
            return [
                4,
                false
            ];
        default:
            return [
                undefined,
                false
            ];
    }
}
function parseSocksUrl(url) {
    const parsedUrl = new URL(url);
    if (parsedUrl.pathname || parsedUrl.hash || parsedUrl.search) {
        throw fatal(new Error('bad SOCKS URL'));
    }
    const [type, resolveThroughProxy] = typeFromProtocol(parsedUrl.protocol);
    if (!type) {
        throw fatal(new Error('bad SOCKS URL: invalid protocol'));
    }
    const port = parseInt(parsedUrl.port, 10);
    if (Number.isNaN(port)) {
        throw fatal(new Error('bad SOCKS URL: invalid port'));
    }
    const proxy = {
        host: parsedUrl.hostname,
        port,
        type
    };
    return [
        proxy,
        resolveThroughProxy
    ];
}
async function connectSocks(destinationHost, destinationPort, socksUrl, stream, options = {}) {
    var _a;
    const lookup = (_a = options.lookup) !== null && _a !== void 0 ? _a : (0, util_1.promisify)(dns.lookup);
    const [proxy, resolveThroughProxy] = parseSocksUrl(socksUrl);
    if (!resolveThroughProxy) {
        debug('resolving %s locally', destinationHost);
        destinationHost = (await lookup(destinationHost, {
            family: proxy.type === 4 ? 4 : 0
        })).address;
    }
    debug('establishing SOCKS%d connection to %s:%d via %s:%d', proxy.type, destinationHost, destinationPort, proxy.host, proxy.port);
    const socksClient = new socks_1.SocksClient({
        command: 'connect',
        destination: {
            host: destinationHost,
            port: destinationPort
        },
        proxy: Object.assign({}, proxy),
        timeout: options.timeout
    });
    socksClient.connect();
    socksClient.on('established', ({ socket })=>stream._start(socket));
    socksClient.on('error', (e)=>{
        debug('SOCKS failed: %s', e);
        stream.destroy(fatal(e));
    });
}
function openSocks(destinationHost, destinationPort, socksUrl, options) {
    debug('SOCKS connection to %s:%d via %s', destinationHost, destinationPort, socksUrl);
    const stream = new ProxyStream();
    connectSocks(destinationHost, destinationPort, socksUrl, stream, options).catch((e)=>{
        debug('SOCKS failed: %s', e);
        stream.destroy(e);
    });
    return stream;
} //# sourceMappingURL=socks.js.map
}}),
"[project]/node_modules/mqtt/build/lib/connect/tcp.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const net_1 = __importDefault(__turbopack_context__.r("[externals]/net [external] (net, cjs)"));
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-ssr] (ecmascript)"));
const socks_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/socks.js [app-ssr] (ecmascript)"));
const debug = (0, debug_1.default)('mqttjs:tcp');
const buildStream = (client, opts)=>{
    opts.port = opts.port || 1883;
    opts.hostname = opts.hostname || opts.host || 'localhost';
    if (opts.socksProxy) {
        return (0, socks_1.default)(opts.hostname, opts.port, opts.socksProxy, {
            timeout: opts.socksTimeout
        });
    }
    const { port, path } = opts;
    const host = opts.hostname;
    debug('port %d and host %s', port, host);
    return net_1.default.createConnection({
        port,
        host,
        path
    });
};
exports.default = buildStream; //# sourceMappingURL=tcp.js.map
}}),
"[project]/node_modules/mqtt/build/lib/connect/tls.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const tls_1 = __importDefault(__turbopack_context__.r("[externals]/tls [external] (tls, cjs)"));
const net_1 = __importDefault(__turbopack_context__.r("[externals]/net [external] (net, cjs)"));
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-ssr] (ecmascript)"));
const socks_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/socks.js [app-ssr] (ecmascript)"));
const debug = (0, debug_1.default)('mqttjs:tls');
function connect(opts) {
    const { host, port, socksProxy } = opts, rest = __rest(opts, [
        "host",
        "port",
        "socksProxy"
    ]);
    return tls_1.default.connect(socksProxy ? Object.assign(Object.assign({}, rest), {
        socket: (0, socks_1.default)(host, port, socksProxy, {
            timeout: opts.socksTimeout
        })
    }) : opts);
}
const buildStream = (client, opts)=>{
    opts.port = opts.port || 8883;
    opts.host = opts.hostname || opts.host || 'localhost';
    if (net_1.default.isIP(opts.host) === 0) {
        opts.servername = opts.host;
    }
    opts.rejectUnauthorized = opts.rejectUnauthorized !== false;
    delete opts.path;
    debug('port %d host %s rejectUnauthorized %b', opts.port, opts.host, opts.rejectUnauthorized);
    const connection = connect(opts);
    connection.on('secureConnect', ()=>{
        if (opts.rejectUnauthorized && !connection.authorized) {
            connection.emit('error', new Error('TLS not authorized'));
        } else {
            connection.removeListener('error', handleTLSerrors);
        }
    });
    function handleTLSerrors(err) {
        if (opts.rejectUnauthorized) {
            client.emit('error', err);
        }
        connection.end();
    }
    connection.on('error', handleTLSerrors);
    return connection;
};
exports.default = buildStream; //# sourceMappingURL=tls.js.map
}}),
"[project]/node_modules/mqtt/build/lib/connect/index.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.connectAsync = connectAsync;
const debug_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-ssr] (ecmascript)"));
const url_1 = __importDefault(__turbopack_context__.r("[externals]/url [external] (url, cjs)"));
const client_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/client.js [app-ssr] (ecmascript)"));
const is_browser_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/is-browser.js [app-ssr] (ecmascript)"));
if (typeof (process === null || process === void 0 ? void 0 : process.nextTick) !== 'function') {
    process.nextTick = setImmediate;
}
const debug = (0, debug_1.default)('mqttjs');
let protocols = null;
function parseAuthOptions(opts) {
    let matches;
    if (opts.auth) {
        matches = opts.auth.match(/^(.+):(.+)$/);
        if (matches) {
            opts.username = matches[1];
            opts.password = matches[2];
        } else {
            opts.username = opts.auth;
        }
    }
}
function connect(brokerUrl, opts) {
    var _a, _b, _c;
    debug('connecting to an MQTT broker...');
    if (typeof brokerUrl === 'object' && !opts) {
        opts = brokerUrl;
        brokerUrl = '';
    }
    opts = opts || {};
    if (brokerUrl && typeof brokerUrl === 'string') {
        const parsedUrl = url_1.default.parse(brokerUrl, true);
        const parsedOptions = {};
        if (parsedUrl.port != null) {
            parsedOptions.port = Number(parsedUrl.port);
        }
        parsedOptions.host = parsedUrl.hostname;
        parsedOptions.query = parsedUrl.query;
        parsedOptions.auth = parsedUrl.auth;
        parsedOptions.protocol = parsedUrl.protocol;
        parsedOptions.path = parsedUrl.path;
        opts = Object.assign(Object.assign({}, parsedOptions), opts);
        if (!opts.protocol) {
            throw new Error('Missing protocol');
        }
        opts.protocol = opts.protocol.replace(/:$/, '');
    }
    opts.unixSocket = opts.unixSocket || ((_a = opts.protocol) === null || _a === void 0 ? void 0 : _a.includes('+unix'));
    if (opts.unixSocket) {
        opts.protocol = opts.protocol.replace('+unix', '');
    } else if (!((_b = opts.protocol) === null || _b === void 0 ? void 0 : _b.startsWith('ws')) && !((_c = opts.protocol) === null || _c === void 0 ? void 0 : _c.startsWith('wx'))) {
        delete opts.path;
    }
    parseAuthOptions(opts);
    if (opts.query && typeof opts.query.clientId === 'string') {
        opts.clientId = opts.query.clientId;
    }
    if (is_browser_1.default || opts.unixSocket) {
        opts.socksProxy = undefined;
    } else if (opts.socksProxy === undefined && typeof process !== 'undefined') {
        opts.socksProxy = process.env['MQTTJS_SOCKS_PROXY'];
    }
    if (opts.cert && opts.key) {
        if (opts.protocol) {
            if ([
                'mqtts',
                'wss',
                'wxs',
                'alis'
            ].indexOf(opts.protocol) === -1) {
                switch(opts.protocol){
                    case 'mqtt':
                        opts.protocol = 'mqtts';
                        break;
                    case 'ws':
                        opts.protocol = 'wss';
                        break;
                    case 'wx':
                        opts.protocol = 'wxs';
                        break;
                    case 'ali':
                        opts.protocol = 'alis';
                        break;
                    default:
                        throw new Error(`Unknown protocol for secure connection: "${opts.protocol}"!`);
                }
            }
        } else {
            throw new Error('Missing secure protocol key');
        }
    }
    if (!protocols) {
        protocols = {};
        if (!is_browser_1.default && !opts.forceNativeWebSocket) {
            protocols.ws = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/ws.js [app-ssr] (ecmascript)").streamBuilder;
            protocols.wss = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/ws.js [app-ssr] (ecmascript)").streamBuilder;
            protocols.mqtt = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/tcp.js [app-ssr] (ecmascript)").default;
            protocols.tcp = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/tcp.js [app-ssr] (ecmascript)").default;
            protocols.ssl = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/tls.js [app-ssr] (ecmascript)").default;
            protocols.tls = protocols.ssl;
            protocols.mqtts = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/tls.js [app-ssr] (ecmascript)").default;
        } else {
            protocols.ws = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/ws.js [app-ssr] (ecmascript)").browserStreamBuilder;
            protocols.wss = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/ws.js [app-ssr] (ecmascript)").browserStreamBuilder;
            protocols.wx = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/wx.js [app-ssr] (ecmascript)").default;
            protocols.wxs = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/wx.js [app-ssr] (ecmascript)").default;
            protocols.ali = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/ali.js [app-ssr] (ecmascript)").default;
            protocols.alis = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/ali.js [app-ssr] (ecmascript)").default;
        }
    }
    if (!protocols[opts.protocol]) {
        const isSecure = [
            'mqtts',
            'wss'
        ].indexOf(opts.protocol) !== -1;
        opts.protocol = [
            'mqtt',
            'mqtts',
            'ws',
            'wss',
            'wx',
            'wxs',
            'ali',
            'alis'
        ].filter((key, index)=>{
            if (isSecure && index % 2 === 0) {
                return false;
            }
            return typeof protocols[key] === 'function';
        })[0];
    }
    if (opts.clean === false && !opts.clientId) {
        throw new Error('Missing clientId for unclean clients');
    }
    if (opts.protocol) {
        opts.defaultProtocol = opts.protocol;
    }
    function wrapper(client) {
        if (opts.servers) {
            if (!client._reconnectCount || client._reconnectCount === opts.servers.length) {
                client._reconnectCount = 0;
            }
            opts.host = opts.servers[client._reconnectCount].host;
            opts.port = opts.servers[client._reconnectCount].port;
            opts.protocol = !opts.servers[client._reconnectCount].protocol ? opts.defaultProtocol : opts.servers[client._reconnectCount].protocol;
            opts.hostname = opts.host;
            client._reconnectCount++;
        }
        debug('calling streambuilder for', opts.protocol);
        return protocols[opts.protocol](client, opts);
    }
    const client = new client_1.default(wrapper, opts);
    client.on('error', ()=>{});
    return client;
}
function connectAsync(brokerUrl, opts, allowRetries = true) {
    return new Promise((resolve, reject)=>{
        const client = connect(brokerUrl, opts);
        const promiseResolutionListeners = {
            connect: (connack)=>{
                removePromiseResolutionListeners();
                resolve(client);
            },
            end: ()=>{
                removePromiseResolutionListeners();
                resolve(client);
            },
            error: (err)=>{
                removePromiseResolutionListeners();
                client.end();
                reject(err);
            }
        };
        if (allowRetries === false) {
            promiseResolutionListeners.close = ()=>{
                promiseResolutionListeners.error(new Error("Couldn't connect to server"));
            };
        }
        function removePromiseResolutionListeners() {
            Object.keys(promiseResolutionListeners).forEach((eventName)=>{
                client.off(eventName, promiseResolutionListeners[eventName]);
            });
        }
        Object.keys(promiseResolutionListeners).forEach((eventName)=>{
            client.on(eventName, promiseResolutionListeners[eventName]);
        });
    });
}
exports.default = connect; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/mqtt/build/mqtt.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function() {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o) {
            var ar = [];
            for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
            for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
    };
}();
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ReasonCodes = exports.KeepaliveManager = exports.UniqueMessageIdProvider = exports.DefaultMessageIdProvider = exports.Store = exports.MqttClient = exports.connectAsync = exports.connect = exports.Client = void 0;
const client_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/client.js [app-ssr] (ecmascript)"));
exports.MqttClient = client_1.default;
const default_message_id_provider_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/default-message-id-provider.js [app-ssr] (ecmascript)"));
exports.DefaultMessageIdProvider = default_message_id_provider_1.default;
const unique_message_id_provider_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/unique-message-id-provider.js [app-ssr] (ecmascript)"));
exports.UniqueMessageIdProvider = unique_message_id_provider_1.default;
const store_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/store.js [app-ssr] (ecmascript)"));
exports.Store = store_1.default;
const connect_1 = __importStar(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/connect/index.js [app-ssr] (ecmascript)"));
exports.connect = connect_1.default;
Object.defineProperty(exports, "connectAsync", {
    enumerable: true,
    get: function() {
        return connect_1.connectAsync;
    }
});
const KeepaliveManager_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/KeepaliveManager.js [app-ssr] (ecmascript)"));
exports.KeepaliveManager = KeepaliveManager_1.default;
exports.Client = client_1.default;
__exportStar(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/client.js [app-ssr] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/mqtt/build/lib/shared.js [app-ssr] (ecmascript)"), exports);
var ack_1 = __turbopack_context__.r("[project]/node_modules/mqtt/build/lib/handlers/ack.js [app-ssr] (ecmascript)");
Object.defineProperty(exports, "ReasonCodes", {
    enumerable: true,
    get: function() {
        return ack_1.ReasonCodes;
    }
}); //# sourceMappingURL=mqtt.js.map
}}),
"[project]/node_modules/mqtt/build/index.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function() {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o) {
            var ar = [];
            for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
            for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
    };
}();
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const mqtt = __importStar(__turbopack_context__.r("[project]/node_modules/mqtt/build/mqtt.js [app-ssr] (ecmascript)"));
exports.default = mqtt;
__exportStar(__turbopack_context__.r("[project]/node_modules/mqtt/build/mqtt.js [app-ssr] (ecmascript)"), exports); //# sourceMappingURL=index.js.map
}}),

};

//# sourceMappingURL=node_modules_mqtt_c2696e9a._.js.map
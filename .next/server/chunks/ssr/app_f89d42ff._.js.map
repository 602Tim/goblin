{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/actions/order.js"],"sourcesContent":["// app/actions/order.js\r\n\r\nexport const addOrder = async (body) => {\r\n  const response = await fetch(\"/api/order/checkout\", {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(body),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"送出訂單失敗\");\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// 其他函式目前先保留 null，未來可以實作\r\nexport const getCustomerOrder = async (customerId) => {\r\n  return null;\r\n};\r\nexport async function editOrderStatus({ status, paymentStatus }, orderId) {\r\n  console.log(\"➡️ 呼叫 editOrderStatus\", { status, paymentStatus, orderId });\r\n  try {\r\n    // 獲取目前訂單資料\r\n    const orderRes = await fetch(`/api/order/${orderId}`);\r\n    if (!orderRes.ok) return null;\r\n    const order = await orderRes.json();\r\n\r\n    // 根據條件判斷是否可以更新為 READY 狀態\r\n    if (status === \"READY\") {\r\n      if (!(order.paymentStatus === true && order.completedAt)) {\r\n        console.warn(\"❌ 無法更新為 READY：尚未完成付款或尚未標記完成\");\r\n        return null;\r\n      }\r\n    }\r\n\r\n    const body = {};\r\n    if (status !== undefined) body.status = status;\r\n    if (paymentStatus !== undefined) body.paymentStatus = paymentStatus;\r\n\r\n    const res = await fetch(`/api/order/${orderId}/status`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(body),\r\n    });\r\n    if (!res.ok) {\r\n    const errorText = await res.text();\r\n    console.error(\"❌ 更新失敗：\", res.status, errorText);\r\n    return null;\r\n  }\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error(\"❌ 修改訂單狀態失敗:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getPendingOrders = async () => {\r\n  const response = await fetch(`/api/order?status=PENDING,PREPARING`);\r\n  if (!response.ok) {\r\n    console.error(\"❌ 無法取得訂單\", response.status);\r\n    return null;\r\n  }\r\n  return await response.json();\r\n};\r\nexport const getKitchenOrders = async () => {\r\n  const response = await fetch(\"/api/kitchen\");\r\n  if (!response.ok) {\r\n    console.error(\"❌ 無法取得廚房訂單\", response.status);\r\n    return null;\r\n  }\r\n  return await response.json();\r\n};\r\nexport const getReadyOrders = async () => {\r\n  return null;\r\n};\r\nexport const getOrderById = async () => {\r\n  return null;\r\n};\r\n\r\nexport async function editOrderCompletion(orderId) {\r\n  try {\r\n    const res = await fetch(`/api/order/${orderId}/status`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({}), // ⚠️ 不傳 status，只是為了觸發 completedAt 設定\r\n    });\r\n\r\n    if (!res.ok) return null;\r\n    return await res.json();\r\n  } catch (err) {\r\n    console.error(\"❌ 完成訂單失敗:\", err);\r\n    return null;\r\n  }\r\n}\r\n\r\n// app/actions/order.js\r\nexport async function deleteOrder(orderId) {\r\n  const res = await fetch(`/api/order/${orderId}`, {\r\n    method: \"DELETE\",\r\n  });\r\n  if (!res.ok) return null;\r\n  return await res.json();\r\n}\r\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;;;;;;;;;AAEhB,MAAM,WAAW,OAAO;IAC7B,MAAM,WAAW,MAAM,MAAM,uBAAuB;QAClD,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;IACvB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,mBAAmB,OAAO;IACrC,OAAO;AACT;AACO,eAAe,gBAAgB,EAAE,MAAM,EAAE,aAAa,EAAE,EAAE,OAAO;IACtE,QAAQ,GAAG,CAAC,yBAAyB;QAAE;QAAQ;QAAe;IAAQ;IACtE,IAAI;QACF,WAAW;QACX,MAAM,WAAW,MAAM,MAAM,CAAC,WAAW,EAAE,SAAS;QACpD,IAAI,CAAC,SAAS,EAAE,EAAE,OAAO;QACzB,MAAM,QAAQ,MAAM,SAAS,IAAI;QAEjC,yBAAyB;QACzB,IAAI,WAAW,SAAS;YACtB,IAAI,CAAC,CAAC,MAAM,aAAa,KAAK,QAAQ,MAAM,WAAW,GAAG;gBACxD,QAAQ,IAAI,CAAC;gBACb,OAAO;YACT;QACF;QAEA,MAAM,OAAO,CAAC;QACd,IAAI,WAAW,WAAW,KAAK,MAAM,GAAG;QACxC,IAAI,kBAAkB,WAAW,KAAK,aAAa,GAAG;QAEtD,MAAM,MAAM,MAAM,MAAM,CAAC,WAAW,EAAE,QAAQ,OAAO,CAAC,EAAE;YACtD,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QACA,IAAI,CAAC,IAAI,EAAE,EAAE;YACb,MAAM,YAAY,MAAM,IAAI,IAAI;YAChC,QAAQ,KAAK,CAAC,WAAW,IAAI,MAAM,EAAE;YACrC,OAAO;QACT;QACE,OAAO,MAAM,IAAI,IAAI;IACvB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,eAAe;QAC7B,OAAO;IACT;AACF;;AAEO,MAAM,mBAAmB;IAC9B,MAAM,WAAW,MAAM,MAAM,CAAC,mCAAmC,CAAC;IAClE,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,QAAQ,KAAK,CAAC,YAAY,SAAS,MAAM;QACzC,OAAO;IACT;IACA,OAAO,MAAM,SAAS,IAAI;AAC5B;AACO,MAAM,mBAAmB;IAC9B,MAAM,WAAW,MAAM,MAAM;IAC7B,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,QAAQ,KAAK,CAAC,cAAc,SAAS,MAAM;QAC3C,OAAO;IACT;IACA,OAAO,MAAM,SAAS,IAAI;AAC5B;AACO,MAAM,iBAAiB;IAC5B,OAAO;AACT;AACO,MAAM,eAAe;IAC1B,OAAO;AACT;AAEO,eAAe,oBAAoB,OAAO;IAC/C,IAAI;QACF,MAAM,MAAM,MAAM,MAAM,CAAC,WAAW,EAAE,QAAQ,OAAO,CAAC,EAAE;YACtD,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC,CAAC;QACxB;QAEA,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO;QACpB,OAAO,MAAM,IAAI,IAAI;IACvB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,aAAa;QAC3B,OAAO;IACT;AACF;AAGO,eAAe,YAAY,OAAO;IACvC,MAAM,MAAM,MAAM,MAAM,CAAC,WAAW,EAAE,SAAS,EAAE;QAC/C,QAAQ;IACV;IACA,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO;IACpB,OAAO,MAAM,IAAI,IAAI;AACvB","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/actions/notification.js"],"sourcesContent":["// app/actions/notification.js (修正後)\r\n\"use server\"; // ✨ 必須有這行，將其標記為 Server Actions\r\n\r\nimport { prisma } from '@/lib/prisma'; // ✨ 導入具名導出的 prisma 客戶端\r\n\r\nexport const addNotification = async (body, userId) => {\r\n    try {\r\n        // ✨ 這裡應該是添加通知到資料庫的邏輯\r\n        if (!userId || !body || !body.message || !body.orderId || !body.title || !body.type) {\r\n            throw new Error(\"Missing notification data or userId.\");\r\n        }\r\n        const newNotification = await prisma.notification.create({\r\n            data: {\r\n                userId: userId,\r\n                orderId: body.orderId, // 假設 body 包含 orderId\r\n                message: body.message,\r\n                // 其他欄位如 isRead 會有 default 值\r\n                // title 和 type 需要在你的 Notification model 中定義或處理\r\n            }\r\n        });\r\n        return { success: true, notification: newNotification };\r\n    } catch (error) {\r\n        console.error(\"Failed to add notification (Server Action):\", error);\r\n        return { error: error.message };\r\n    }\r\n};\r\n\r\nexport const getUserNotification = async (userId) => {\r\n    try {\r\n        if (!userId) throw new Error(\"User ID is required for fetching notifications.\");\r\n\r\n        const notifications = await prisma.notification.findMany({\r\n            where: { userId },\r\n            orderBy: { createdAt: 'desc' },\r\n        });\r\n        return notifications;\r\n    } catch (error) {\r\n        console.error(\"Failed to get user notifications (Server Action):\", error);\r\n        return []; // ⚠️ 回傳空陣列，避免前端崩潰\r\n    }\r\n};\r\n\r\n\r\nexport const deleteNotification = async (notificationId) => {\r\n    try {\r\n        // ✨ 這裡應該是從資料庫刪除通知的邏輯\r\n        if (!notificationId) {\r\n            throw new Error(\"Notification ID is required for deleting.\");\r\n        }\r\n        await prisma.notification.delete({\r\n            where: { id: notificationId },\r\n        });\r\n        return { success: true };\r\n    } catch (error) {\r\n        console.error(\"Failed to delete notification (Server Action):\", error);\r\n        // 如果是找不到通知的錯誤，可以更精確地處理\r\n        if (error.code === 'P2025') {\r\n            return { error: \"Notification not found.\" };\r\n        }\r\n        return { error: error.message };\r\n    }\r\n};"],"names":[],"mappings":";;;;;;IAKa,kBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/kitchen/page.jsx"],"sourcesContent":["\"use client\";\r\nimport { useEffect, useState, useMemo } from \"react\";\r\nimport { useMqttClient } from \"@/hooks/useMqttClient\";\r\nimport { editOrderStatus, getKitchenOrders, editOrderCompletion } from \"@/app/actions/order\";\r\nimport { addNotification } from \"@/app/actions/notification\";\r\nimport { getKitchenOrderTopic } from \"@/utils/mqttTopic\";\r\n\r\nexport default function KitchenPage() {\r\n    const topic = useMemo(() => getKitchenOrderTopic(), []);\r\n    const { messages, publishMessage } = useMqttClient({\r\n        subscribeTopics: [topic],\r\n    });\r\n\r\n    const [orders, setOrders] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchOrders = async () => {\r\n            try {\r\n            let data = await getKitchenOrders();\r\n            if (!data) {\r\n                alert(\"取得廚房訂單失敗\");\r\n                return;\r\n            }\r\n\r\n            setOrders(data);\r\n            } catch (err) {\r\n            alert(\"取得廚房訂單失敗\");\r\n            }\r\n        };\r\n        fetchOrders();\r\n        }, []);\r\n    useEffect(() => {\r\n        if (messages.length === 0) return;\r\n\r\n        const lastMessage = messages[messages.length - 1];\r\n        try {\r\n            const newOrder = JSON.parse(lastMessage.payload);\r\n            setOrders((prev) => {\r\n                const exists = prev.some((order) => order.id === newOrder.id);\r\n                return exists ? prev : [...prev, newOrder];\r\n            });\r\n        } catch (err) {\r\n            console.error(\"無法解析 MQTT 訊息:\", err);\r\n        }\r\n    }, [messages]);\r\n\r\n    const handleCompleteOrder = async (orderId) => {\r\n        try {\r\n            // 標記為已完成（isCompleted = true）\r\n            const completeRes = await editOrderCompletion(orderId);\r\n            if (!completeRes) {\r\n            alert(\"❌ 標記完成失敗！\");\r\n            return;\r\n            }\r\n\r\n            // 嘗試設為 READY（會判斷付款是否完成）\r\n            const data = await editOrderStatus({ status: \"READY\" }, orderId);\r\n            if (!data) {\r\n            alert(\"❌ 設定為 READY 失敗（可能尚未付款）\");\r\n            return;\r\n            }\r\n\r\n            // 從 UI 移除該訂單\r\n            setOrders((prev) => prev.filter((order) => order.id !== orderId));\r\n\r\n            // 發送通知\r\n            const orderToUpdate = orders.find((order) => order.id === orderId);\r\n            const customerId = orderToUpdate?.customerId;\r\n\r\n            if (!customerId) {\r\n            alert(\"找不到顧客資料\");\r\n            return;\r\n            }\r\n            const message = `可領取訂單 ${orderId.slice(0, 8)}`;\r\n\r\n            let notificationRes = await addNotification({ orderId, message }, customerId);\r\n            if (!notificationRes) {\r\n            const res = await fetch(`/api/notifications/users/${customerId}`, {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ orderId, message }),\r\n            });\r\n            if (!res.ok) {\r\n                alert(\"傳送通知失敗\");\r\n                return;\r\n            }\r\n            notificationRes = await res.json();\r\n            }\r\n\r\n            const readyNotificationTopic = `nuu/shisa/beigo/notify/order${customerId}`;\r\n            if (notificationRes?.id) {\r\n            const messagePayload = JSON.stringify({\r\n                type: \"READY\",\r\n                message: `訂單 ${orderId.slice(0, 8)} 已準備好`,\r\n                notificationId: notificationRes.id,\r\n            });\r\n            publishMessage(readyNotificationTopic, messagePayload);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"完成訂單失敗:\", error);\r\n        }\r\n        };\r\n\r\n\r\n\r\n    return (\r\n        <main className=\"max-w-7xl mx-auto px-4 py-8\">\r\n            <h1 className=\"text-3xl font-extrabold mb-6 text-gray-800\">\r\n                👨‍🍳 廚房訂單看板\r\n            </h1>\r\n            {orders.length === 0 ? (\r\n                <div className=\"text-center text-gray-500 mt-12 text-lg\">\r\n                    暫無待處理訂單 🍳\r\n                </div>\r\n            ) : (\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n                    {orders.map((order, idx) => (\r\n                        <div\r\n                            key={`${order.id}-${idx}`}\r\n                            className=\"bg-white rounded-2xl shadow-md hover:shadow-lg transition duration-200 p-6 border border-gray-100\"\r\n                        >\r\n                            <div className=\"flex justify-between items-start mb-4\">\r\n                                <div>\r\n                                    <h2 className=\"text-lg font-semibold text-gray-800\">\r\n                                        訂單 #{order.id.slice(0, 8)}\r\n                                    </h2>\r\n                                    <p className=\"text-sm text-gray-500\">\r\n                                        {new Date(order.createdAt).toLocaleString()}\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"border-t pt-4\">\r\n                                <ul className=\"space-y-2 text-sm\">\r\n                                    {order.items.map((item, idx) => (\r\n                                        <li key={`${item.id}-${idx}`}>\r\n                                            <div className=\"flex justify-between items-start\">\r\n                                                <span className=\"font-medium\">\r\n                                                    {item.menuItem.name} × {item.quantity}\r\n                                                </span>\r\n                                            </div>\r\n                                            {item.specialRequest && (\r\n                                                <div className=\"mt-1 text-yellow-700 bg-yellow-50 border border-yellow-200 rounded px-2 py-1\">\r\n                                                    <strong>備註：</strong> {item.specialRequest}\r\n                                                </div>\r\n                                            )}\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                            <button\r\n                                onClick={() =>\r\n                                    handleCompleteOrder(order.id)\r\n                                }\r\n                                className=\"mt-5 w-full bg-green-600 text-white text-sm font-medium py-2 rounded-lg hover:bg-green-700 transition\"\r\n                            >\r\n                                ✅ 標記為已完成\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </main>\r\n    );\r\n}\r\n\r\n"],"names":[],"mappings":"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","debugId":null}}]
}
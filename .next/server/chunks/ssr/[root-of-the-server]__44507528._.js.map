{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/hooks/useMqttClient.js"],"sourcesContent":["\"use client\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport mqtt from \"mqtt\";\r\n\r\nexport function useMqttClient({\r\n    brokerUrl = process.env.NEXT_PUBLIC_MQTT_URL || \"wss://broker.emqx.io:8084/mqtt\",\r\n    subscribeTopics = [],\r\n    publishTopic = \"\",\r\n    mqttOptions = {},\r\n}) {\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [messages, setMessages] = useState([]);\r\n    const clientRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const clientId = `nextjs-client-${Math.random().toString(16).slice(2, 10)}`;\r\n        const client = mqtt.connect(brokerUrl, {\r\n            clientId,\r\n            clean: true,\r\n            connectTimeout: 4000,\r\n            reconnectPeriod: 1000,\r\n            ...mqttOptions,\r\n        });\r\n\r\n        clientRef.current = client;\r\n\r\n        client.on(\"connect\", () => {\r\n            console.log(`已連接 MQTT Broker: ${brokerUrl}`);\r\n            setIsConnected(true);\r\n\r\n            subscribeTopics.forEach((topic) => {\r\n                client.subscribe(topic, (err) => {\r\n                    if (err) {\r\n                        console.error(`訂閱主題 ${topic} 失敗:`, err);\r\n                    } else {\r\n                        console.log(`已訂閱主題: ${topic}`);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        client.on(\"message\", (topic, payload) => {\r\n            const message = {\r\n                topic,\r\n                payload: payload.toString(),\r\n                timestamp: new Date().toISOString(),\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, message]);\r\n        });\r\n\r\n        client.on(\"error\", (err) => {\r\n            console.error(\"MQTT Client 錯誤:\", err);\r\n            setIsConnected(false);\r\n        });\r\n\r\n        client.on(\"close\", () => {\r\n            console.warn(\"MQTT Client 連接已關閉\");\r\n            setIsConnected(false);\r\n        });\r\n\r\n        return () => {\r\n            subscribeTopics.forEach((topic) => client.unsubscribe(topic));\r\n            client.end();\r\n        };\r\n    }, [brokerUrl, subscribeTopics.join(\",\")]);\r\n\r\n    const publishMessage = (topic, msg) => {\r\n        const client = clientRef.current;\r\n        if (!topic) topic = publishTopic;\r\n        if (client && isConnected && topic && msg.trim()) {\r\n            client.publish(topic, msg, { qos: 0 }, (err) => {\r\n                if (err) {\r\n                    console.error(`發佈消息到 ${topic} 失敗:`, err);\r\n                } else {\r\n                    console.log(`已發佈消息到 ${topic}`);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    return { isConnected, messages, publishMessage };\r\n}\r\n"],"names":[],"mappings":";;;AACA;AACA;AAFA;;;AAIO,SAAS,cAAc,EAC1B,YAAY,sEAAoC,gCAAgC,EAChF,kBAAkB,EAAE,EACpB,eAAe,EAAE,EACjB,cAAc,CAAC,CAAC,EACnB;IACG,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAC3C,MAAM,YAAY,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IAEzB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,MAAM,WAAW,CAAC,cAAc,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,KAAK,CAAC,GAAG,KAAK;QAC3E,MAAM,SAAS,sIAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;YACnC;YACA,OAAO;YACP,gBAAgB;YAChB,iBAAiB;YACjB,GAAG,WAAW;QAClB;QAEA,UAAU,OAAO,GAAG;QAEpB,OAAO,EAAE,CAAC,WAAW;YACjB,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,WAAW;YAC3C,eAAe;YAEf,gBAAgB,OAAO,CAAC,CAAC;gBACrB,OAAO,SAAS,CAAC,OAAO,CAAC;oBACrB,IAAI,KAAK;wBACL,QAAQ,KAAK,CAAC,CAAC,KAAK,EAAE,MAAM,IAAI,CAAC,EAAE;oBACvC,OAAO;wBACH,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,OAAO;oBACjC;gBACJ;YACJ;QACJ;QAEA,OAAO,EAAE,CAAC,WAAW,CAAC,OAAO;YACzB,MAAM,UAAU;gBACZ;gBACA,SAAS,QAAQ,QAAQ;gBACzB,WAAW,IAAI,OAAO,WAAW;YACrC;YACA,YAAY,CAAC,eAAiB;uBAAI;oBAAc;iBAAQ;QAC5D;QAEA,OAAO,EAAE,CAAC,SAAS,CAAC;YAChB,QAAQ,KAAK,CAAC,mBAAmB;YACjC,eAAe;QACnB;QAEA,OAAO,EAAE,CAAC,SAAS;YACf,QAAQ,IAAI,CAAC;YACb,eAAe;QACnB;QAEA,OAAO;YACH,gBAAgB,OAAO,CAAC,CAAC,QAAU,OAAO,WAAW,CAAC;YACtD,OAAO,GAAG;QACd;IACJ,GAAG;QAAC;QAAW,gBAAgB,IAAI,CAAC;KAAK;IAEzC,MAAM,iBAAiB,CAAC,OAAO;QAC3B,MAAM,SAAS,UAAU,OAAO;QAChC,IAAI,CAAC,OAAO,QAAQ;QACpB,IAAI,UAAU,eAAe,SAAS,IAAI,IAAI,IAAI;YAC9C,OAAO,OAAO,CAAC,OAAO,KAAK;gBAAE,KAAK;YAAE,GAAG,CAAC;gBACpC,IAAI,KAAK;oBACL,QAAQ,KAAK,CAAC,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,EAAE;gBACxC,OAAO;oBACH,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,OAAO;gBACjC;YACJ;QACJ;IACJ;IAEA,OAAO;QAAE;QAAa;QAAU;IAAe;AACnD","debugId":null}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/actions/notification.js"],"sourcesContent":["// app/actions/notification.js (修正後)\r\n\"use server\"; // ✨ 必須有這行，將其標記為 Server Actions\r\n\r\nimport { prisma } from '@/lib/prisma'; // ✨ 導入具名導出的 prisma 客戶端\r\n\r\nexport const addNotification = async (body, userId) => {\r\n    try {\r\n        // ✨ 這裡應該是添加通知到資料庫的邏輯\r\n        if (!userId || !body || !body.message || !body.orderId || !body.title || !body.type) {\r\n            throw new Error(\"Missing notification data or userId.\");\r\n        }\r\n        const newNotification = await prisma.notification.create({\r\n            data: {\r\n                userId: userId,\r\n                orderId: body.orderId, // 假設 body 包含 orderId\r\n                message: body.message,\r\n                // 其他欄位如 isRead 會有 default 值\r\n                // title 和 type 需要在你的 Notification model 中定義或處理\r\n            }\r\n        });\r\n        return { success: true, notification: newNotification };\r\n    } catch (error) {\r\n        console.error(\"Failed to add notification (Server Action):\", error);\r\n        return { error: error.message };\r\n    }\r\n};\r\n\r\nexport const getUserNotification = async (userId) => {\r\n    try {\r\n        if (!userId) throw new Error(\"User ID is required for fetching notifications.\");\r\n\r\n        const notifications = await prisma.notification.findMany({\r\n            where: { userId },\r\n            orderBy: { createdAt: 'desc' },\r\n        });\r\n        return notifications;\r\n    } catch (error) {\r\n        console.error(\"Failed to get user notifications (Server Action):\", error);\r\n        return []; // ⚠️ 回傳空陣列，避免前端崩潰\r\n    }\r\n};\r\n\r\n\r\nexport const deleteNotification = async (notificationId) => {\r\n    try {\r\n        // ✨ 這裡應該是從資料庫刪除通知的邏輯\r\n        if (!notificationId) {\r\n            throw new Error(\"Notification ID is required for deleting.\");\r\n        }\r\n        await prisma.notification.delete({\r\n            where: { id: notificationId },\r\n        });\r\n        return { success: true };\r\n    } catch (error) {\r\n        console.error(\"Failed to delete notification (Server Action):\", error);\r\n        // 如果是找不到通知的錯誤，可以更精確地處理\r\n        if (error.code === 'P2025') {\r\n            return { error: \"Notification not found.\" };\r\n        }\r\n        return { error: error.message };\r\n    }\r\n};"],"names":[],"mappings":";;;;;;IA2Ba,sBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/utils/mqttTopic.ts"],"sourcesContent":["const TOPIC_ROOT = process.env.NEXT_PUBLIC_MQTT_TOPIC_ROOT;\r\n\r\nconst getTopicRoot = () => {\r\n    if (!TOPIC_ROOT) {\r\n        throw new Error(\"未填寫 .env 的 NEXT_PUBLIC_MQTT_TOPIC_ROOT\");\r\n    }\r\n    return `nuu/shisa/${TOPIC_ROOT}`;\r\n};\r\n\r\nexport const getOrderCheckoutTopic = () => {\r\n    const topicRoot = getTopicRoot();\r\n    return `${topicRoot}/notify/order/checkout`;\r\n};\r\nexport const getAcceptCustomerOrderTopic = (customerId: number | string) => {\r\n    const topicRoot = getTopicRoot();\r\n    return `${topicRoot}/notify/order/accept/${customerId}`;\r\n};\r\nexport const getKitchenOrderTopic = () => {\r\n    const topicRoot = getTopicRoot();\r\n    return `${topicRoot}/notify/order/kitchen`;\r\n};\r\nexport const getKitchenReadyOrderTopic = (customerId: number | string) => {\r\n    const topicRoot = getTopicRoot();\r\n    return `${topicRoot}/notify/order/ready/${customerId}`;\r\n};\r\nexport const getStaffCompletedOrderTopic = (customerId: number | string) => {\r\n    const topicRoot = getTopicRoot();\r\n    return `${topicRoot}/notify/order/completed/${customerId}`;\r\n};\r\nexport const getCustomerCancelOrderTopic = (customerId: number | string) => {\r\n    const topicRoot = getTopicRoot();\r\n    return `${topicRoot}/notify/order/cancel/${customerId}`;\r\n};\r\n\r\nexport const getOrderStatusWildcardTopic = (customerId: number | string) => {\r\n    const topicRoot = getTopicRoot();\r\n    return `${topicRoot}/notify/order/+/${customerId}`;\r\n}\r\nexport function getOrderToKitchenTopic() {\r\n  return `nuu/shisa/orders/to-kitchen`;\r\n}\r\n\r\nexport function getNotificationTopicByUserId(userId: string) {\r\n  return `nuu/shisa/notifications/${userId}`;\r\n}\r\nexport function getCustomerOrderUpdateTopic(customerId: string) {\r\n  return `nuu/shisa/customer/${customerId}/orders/updated`;\r\n}"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAM;AAEN,MAAM,eAAe;IACjB,uCAAiB;;IAEjB;IACA,OAAO,CAAC,UAAU,EAAE,YAAY;AACpC;AAEO,MAAM,wBAAwB;IACjC,MAAM,YAAY;IAClB,OAAO,GAAG,UAAU,sBAAsB,CAAC;AAC/C;AACO,MAAM,8BAA8B,CAAC;IACxC,MAAM,YAAY;IAClB,OAAO,GAAG,UAAU,qBAAqB,EAAE,YAAY;AAC3D;AACO,MAAM,uBAAuB;IAChC,MAAM,YAAY;IAClB,OAAO,GAAG,UAAU,qBAAqB,CAAC;AAC9C;AACO,MAAM,4BAA4B,CAAC;IACtC,MAAM,YAAY;IAClB,OAAO,GAAG,UAAU,oBAAoB,EAAE,YAAY;AAC1D;AACO,MAAM,8BAA8B,CAAC;IACxC,MAAM,YAAY;IAClB,OAAO,GAAG,UAAU,wBAAwB,EAAE,YAAY;AAC9D;AACO,MAAM,8BAA8B,CAAC;IACxC,MAAM,YAAY;IAClB,OAAO,GAAG,UAAU,qBAAqB,EAAE,YAAY;AAC3D;AAEO,MAAM,8BAA8B,CAAC;IACxC,MAAM,YAAY;IAClB,OAAO,GAAG,UAAU,gBAAgB,EAAE,YAAY;AACtD;AACO,SAAS;IACd,OAAO,CAAC,2BAA2B,CAAC;AACtC;AAEO,SAAS,6BAA6B,MAAc;IACzD,OAAO,CAAC,wBAAwB,EAAE,QAAQ;AAC5C;AACO,SAAS,4BAA4B,UAAkB;IAC5D,OAAO,CAAC,mBAAmB,EAAE,WAAW,eAAe,CAAC;AAC1D","debugId":null}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/hooks/useNotifications.js"],"sourcesContent":["// hooks/useNotifications.js\r\n\"use client\";\r\n\r\nimport { useEffect, useState, useCallback } from \"react\"; // ✨ 新增 useCallback\r\n// ✨ 移除這行：import useUser from \"./useUser\"; // 不再需要 useUser hook\r\nimport { useMqttClient } from \"@/hooks/useMqttClient\";\r\nimport { getUserNotification } from \"@/app/actions/notification\";\r\nimport { getOrderStatusWildcardTopic } from \"@/utils/mqttTopic\";\r\n\r\n// ✨ 修改：useNotifications 現在接受 userId 作為參數\r\nexport default function useNotifications(userId) {\r\n    // 移除 useUser 相關的 state\r\n    // const { user, loading: userLoading } = useUser();\r\n    \r\n    const [notifications, setNotifications] = useState([]);\r\n    const [unreadCount, setUnreadCount] = useState(0);\r\n    const [loading, setLoading] = useState(true);\r\n    const [topic, setTopic] = useState(\"\");\r\n\r\n    // MQTT 訂閱的主題現在依賴於傳入的 userId\r\n    const { messages } = useMqttClient({\r\n        subscribeTopics: userId ? [getOrderStatusWildcardTopic(userId)] : [], // ✨ 修改：訂閱主題基於 userId\r\n    });\r\n\r\n    // 提取通知載入邏輯到 useCallback 函數中\r\n    const fetchNotifications = useCallback(async () => {\r\n        // ✨ 關鍵檢查：如果 userId 不存在，則直接返回\r\n        if (!userId) {\r\n            setNotifications([]); // 清空通知\r\n            setUnreadCount(0);\r\n            setLoading(false); // 停止載入狀態\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        // 設定 MQTT topic\r\n        setTopic(getOrderStatusWildcardTopic(userId)); // ✨ 修改：設定 topic 依賴 userId\r\n\r\n        try {\r\n            // action\r\n            let data = await getUserNotification(userId);\r\n            if (!data) {\r\n                // api (作為備用或主要方式)\r\n                const response = await fetch(\r\n                    `/api/notifications/users/${userId}`\r\n                );\r\n                if (!response.ok) {\r\n                    console.error(\"取得使用者通知失敗\");\r\n                    setLoading(false);\r\n                    return;\r\n                }\r\n                data = await response.json();\r\n            }\r\n\r\n            const formedData = data.map((item) => {\r\n                return {\r\n                    id: item.id,\r\n                    title: \"訂單\",\r\n                    type: \"order\",\r\n                    content: item.message,\r\n                    read: item.isRead,\r\n                    time: new Date(item.createdAt).toLocaleString(\"sv\"),\r\n                };\r\n            });\r\n            setNotifications(formedData);\r\n            setUnreadCount(formedData.filter((n) => !n.read).length);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.error(\"載入通知時發生錯誤:\", error);\r\n            setLoading(false);\r\n        }\r\n    }, [userId]); // ✨ 依賴於 userId\r\n\r\n    // 初始載入通知的 useEffect\r\n    useEffect(() => {\r\n        // ✨ 移除 userLoading 和 user.id 的檢查，因為現在直接依賴 userId props\r\n        fetchNotifications(); // ✨ 調用提取出來的 fetchNotifications\r\n    }, [fetchNotifications]); // ✨ 依賴於 fetchNotifications\r\n\r\n    // 當收到新的 MQTT 訊息時更新通知\r\n    useEffect(() => {\r\n        // ✨ 增加安全檢查：如果 userId 不存在，則不處理 MQTT 訊息\r\n        if (!userId || messages.length === 0) {\r\n            return;\r\n        }\r\n        try {\r\n            const lastMessage = messages[messages.length - 1];\r\n            // 確認消息是否為字串，並嘗試解析\r\n            const newOrder = JSON.parse(lastMessage.payload.toString()); // ✨ 確保 payload 是字串\r\n\r\n            setNotifications((prev) => {\r\n                // 防止重複添加相同的通知 (如果 MQTT 有可能重發)\r\n                if (prev.some(n => n.id === newOrder.id)) {\r\n                    return prev;\r\n                }\r\n                // 假設 newOrder 已經是與 formedData 相同格式的物件\r\n                return [newOrder, ...prev];\r\n            });\r\n            setUnreadCount((prev) => prev + 1);\r\n        } catch (err) {\r\n            console.error(\"無法解析 MQTT 訊息:\", err);\r\n        }\r\n    }, [messages, userId]); // ✨ 依賴中加入 userId\r\n\r\n    const notificationSetter = (notifications) => {\r\n        setNotifications(notifications);\r\n        const unreadCount = notifications.filter(\r\n            (n) => n.read === false\r\n        ).length;\r\n        setUnreadCount(unreadCount);\r\n    };\r\n\r\n    return {\r\n        notifications,\r\n        setNotifications: notificationSetter,\r\n        unreadCount,\r\n        loading,\r\n        // 如果外部組件需要，也可以暴露 fetchNotifications\r\n        fetchNotifications \r\n    };\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 451, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/actions/notification.js"],"sourcesContent":["// app/actions/notification.js (修正後)\r\n\"use server\"; // ✨ 必須有這行，將其標記為 Server Actions\r\n\r\nimport { prisma } from '@/lib/prisma'; // ✨ 導入具名導出的 prisma 客戶端\r\n\r\nexport const addNotification = async (body, userId) => {\r\n    try {\r\n        // ✨ 這裡應該是添加通知到資料庫的邏輯\r\n        if (!userId || !body || !body.message || !body.orderId || !body.title || !body.type) {\r\n            throw new Error(\"Missing notification data or userId.\");\r\n        }\r\n        const newNotification = await prisma.notification.create({\r\n            data: {\r\n                userId: userId,\r\n                orderId: body.orderId, // 假設 body 包含 orderId\r\n                message: body.message,\r\n                // 其他欄位如 isRead 會有 default 值\r\n                // title 和 type 需要在你的 Notification model 中定義或處理\r\n            }\r\n        });\r\n        return { success: true, notification: newNotification };\r\n    } catch (error) {\r\n        console.error(\"Failed to add notification (Server Action):\", error);\r\n        return { error: error.message };\r\n    }\r\n};\r\n\r\nexport const getUserNotification = async (userId) => {\r\n    try {\r\n        if (!userId) throw new Error(\"User ID is required for fetching notifications.\");\r\n\r\n        const notifications = await prisma.notification.findMany({\r\n            where: { userId },\r\n            orderBy: { createdAt: 'desc' },\r\n        });\r\n        return notifications;\r\n    } catch (error) {\r\n        console.error(\"Failed to get user notifications (Server Action):\", error);\r\n        return []; // ⚠️ 回傳空陣列，避免前端崩潰\r\n    }\r\n};\r\n\r\n\r\nexport const deleteNotification = async (notificationId) => {\r\n    try {\r\n        // ✨ 這裡應該是從資料庫刪除通知的邏輯\r\n        if (!notificationId) {\r\n            throw new Error(\"Notification ID is required for deleting.\");\r\n        }\r\n        await prisma.notification.delete({\r\n            where: { id: notificationId },\r\n        });\r\n        return { success: true };\r\n    } catch (error) {\r\n        console.error(\"Failed to delete notification (Server Action):\", error);\r\n        // 如果是找不到通知的錯誤，可以更精確地處理\r\n        if (error.code === 'P2025') {\r\n            return { error: \"Notification not found.\" };\r\n        }\r\n        return { error: error.message };\r\n    }\r\n};"],"names":[],"mappings":";;;;;;IA2Ca,qBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 464, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/components/notifyButton.jsx"],"sourcesContent":["// app/components/notifyButton.jsx\r\n\"use client\";\r\n\r\nimport { useEffect, useRef, useState } from \"react\";\r\n// import useUser from \"@/hooks/useUser\"; // ✨ 移除這行，不再需要 useUser\r\nimport useNotifications from \"@/hooks/useNotifications\"; // 保持這行\r\nimport { deleteNotification } from \"@/app/actions/notification\"; // 保持這行\r\n\r\n// ✨ 修改：NotifyButton 現在接受 userId 作為 props\r\nexport default function NotifyButton({ userId }) {\r\n    const [showNotify, setShowNotify] = useState(false);\r\n    // ✨ 修改：直接將 userId 傳遞給 useNotifications\r\n    // useNotifications 內部將負責處理 userId 是否存在的邏輯\r\n    const { notifications, unreadCount, setNotifications } = useNotifications(userId);\r\n    const wrapperRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // ✨ 修改：這裡的 loading 檢查現在應該由 userId 是否存在來判斷，\r\n        // 因為 useNotifications 內部已經處理了載入狀態\r\n        // 如果 userId 不存在，則直接返回，不需監聽點擊外部事件，因為按鈕根本不應該出現\r\n        if (!userId) {\r\n            return;\r\n        }\r\n\r\n        const handleClickOutside = (event) => {\r\n            if (\r\n                wrapperRef.current &&\r\n                !wrapperRef.current.contains(event.target)\r\n            ) {\r\n                setShowNotify(false);\r\n            }\r\n        };\r\n\r\n        if (showNotify) {\r\n            document.addEventListener(\"mousedown\", handleClickOutside);\r\n        } else {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [showNotify, userId]); // ✨ 依賴中加入 userId\r\n\r\n    const handelClickNotificationButton = async () => {\r\n        // ✨ 增加安全檢查：如果 userId 不存在，則直接返回\r\n        if (!userId) {\r\n            alert(\"用戶未登入，無法操作通知。\");\r\n            return;\r\n        }\r\n\r\n        setShowNotify((prev) => !prev);\r\n\r\n        // 如果要標記為已讀，確保有通知才操作\r\n        if (notifications.length > 0) {\r\n            setNotifications(\r\n                notifications.map((n) => {\r\n                    return { ...n, read: true };\r\n                })\r\n            );\r\n\r\n            try {\r\n                // ✨ 修改：使用 userId 而不是 user.id\r\n                const response = await fetch(\r\n                    `/api/notifications/users/${userId}/isRead`,\r\n                    {\r\n                        method: \"PATCH\",\r\n                    }\r\n                );\r\n                if (!response.ok) {\r\n                    alert(\"切換已讀通知失敗\");\r\n                }\r\n            } catch (err) {\r\n                alert(\"錯誤：\" + err.message); // 更友善地顯示錯誤訊息\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDeleteNotification = async (nId) => {\r\n        // ✨ 增加安全檢查：如果 userId 不存在，則直接返回\r\n        if (!userId) {\r\n            alert(\"用戶未登入，無法刪除通知。\");\r\n            return;\r\n        }\r\n\r\n        // 這裡你的程式碼使用了 deleteNotification(nId) 和 fetch /api/notifications/${nId} 兩種方式\r\n        // 建議只保留一種，通常是 API route 方式。\r\n        // 如果 deleteNotification 是一個 Server Action，它應該是獨立且最終的。\r\n        // 為了簡單起見，我會假設你最終透過 API route 處理，或者 deleteNotification 內部會調用 API。\r\n\r\n        try {\r\n            const data = await deleteNotification(nId); // 這是 Server Action\r\n            if (!data || data.error) { // 檢查 Server Action 的結果\r\n                 // 如果 Server Action 失敗，可以選擇呼叫 API route 作為備用或只依賴一個\r\n                const response = await fetch(`/api/notifications/${nId}`, {\r\n                    method: \"DELETE\",\r\n                });\r\n                if (!response.ok) {\r\n                    alert(\"刪除通知失敗\");\r\n                    return;\r\n                }\r\n            }\r\n        } catch (err) {\r\n            alert(\"刪除通知錯誤：\" + err.message);\r\n            return;\r\n        }\r\n        \r\n        setNotifications(notifications.filter((n) => n.id !== nId));\r\n    };\r\n\r\n    // ✨ 關鍵修改：只有當 userId 存在時才渲染整個按鈕組件\r\n    // 如果沒有 userId，代表用戶未登入或會話仍在載入，此時不應該顯示通知按鈕\r\n    if (!userId) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"relative\" ref={wrapperRef}>\r\n            <button\r\n                aria-label=\"查看通知\"\r\n                className=\"relative focus:outline-none\"\r\n                onClick={handelClickNotificationButton}\r\n            >\r\n                <span className=\"text-xl\">🔔</span>\r\n                {unreadCount > 0 && (\r\n                    <span className=\"absolute -top-1 -right-1 bg-rose-400 text-white text-[10px] px-1.5 py-0.5 rounded-full shadow-sm\">\r\n                        {unreadCount}\r\n                    </span>\r\n                )}\r\n            </button>\r\n\r\n            {showNotify && (\r\n                <div className=\"fixed right-1/12 top-16 w-80 bg-white/90 backdrop-blur-md text-black rounded-xl shadow-2xl border border-gray-200 z-[9999]\">\r\n                    {notifications.length > 0 ? (\r\n                        <ul className=\"divide-y divide-gray-100 max-h-64 overflow-y-auto\">\r\n                            {notifications.map((n) => (\r\n                                <li\r\n                                    key={n.id}\r\n                                    className=\"px-4 py-3 hover:bg-gray-100 transition\"\r\n                                >\r\n                                    <div className=\"font-semibold flex justify-between text-gray-800\">\r\n                                        <p>{n.title}</p>\r\n                                        <button\r\n                                            onClick={() =>\r\n                                                handleDeleteNotification(n.id)\r\n                                            }\r\n                                            style={{\r\n                                                width: \"32px\",\r\n                                                height: \"32px\",\r\n                                                borderRadius: \"50%\",\r\n                                            }}\r\n                                            className=\"flex items-center justify-center text-gray-400 hover:text-red-500 hover:bg-gray-200 border border-gray-300 transition cursor-pointer shadow-sm\"\r\n                                            aria-label=\"刪除通知\"\r\n                                            title=\"刪除\"\r\n                                        >\r\n                                            X\r\n                                        </button>\r\n                                    </div>\r\n                                    <div className=\"text-sm text-gray-800\">\r\n                                        {n.content}\r\n                                    </div>\r\n                                    <div className=\"text-xs text-gray-500\">\r\n                                        {n.time}\r\n                                    </div>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    ) : (\r\n                        <div className=\"p-5 text-center text-gray-500 text-sm\">\r\n                            目前沒有通知\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 691, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/components/navbar.jsx"],"sourcesContent":["// app/components/navbar.jsx\r\n\"use client\";\r\n\r\nimport { useSession, signOut } from \"next-auth/react\";\r\nimport Link from \"next/link\";\r\n// ✨ 移除這行：import { useEffect, useState } from \"react\";\r\n// ✨ 移除這行：import useUser from \"@/hooks/useUser\"; // 不再需要 useUser hook\r\n\r\nimport NotifyButton from \"@/app/components/notifyButton\"; // 通知按鈕保持不變\r\n\r\nexport default function Navbar() {\r\n    // 直接從 useSession 獲取 session 數據和狀態\r\n    const { data: session, status } = useSession(); // status: \"loading\" | \"authenticated\" | \"unauthenticated\"\r\n\r\n    // ✨ 移除所有與 useUser 和 sessionStorage 相關的 useEffect 和 state\r\n    // const { user, setUser } = useUser();\r\n    // const [isLogin, setIsLogin] = useState(...)\r\n    // useEffect(() => { ... }, [session, status]);\r\n\r\n    const getRoleLinks = () => {\r\n        // 直接從 session.user 獲取角色，並進行安全檢查\r\n        const userRole = session?.user?.role;\r\n\r\n        if (!userRole) return []; // 如果沒有角色（例如未登入或仍在載入），返回空陣列\r\n\r\n        // 根據角色返回對應的導覽連結\r\n        switch (userRole) {\r\n            case \"CUSTOMER\":\r\n                return [\r\n                    { href: \"/menu\", name: \"菜單\" },\r\n                    { href: \"/orders\", name: \"我的訂單\" },\r\n                ];\r\n            case \"STAFF\":\r\n                return [\r\n                    { href: \"/orders/pending\", name: \"等待中的訂單\" },\r\n                    { href: \"/orders/ready\", name: \"完成的訂單\" },\r\n                ];\r\n            case \"CHEF\":\r\n                return [{ href: \"/kitchen\", name: \"廚房訂單\" }];\r\n            case \"OWNER\":\r\n                return [\r\n                    { href: \"/admin/menu\", name: \"菜單管理\" },\r\n                    { href: \"/admin/users\", name: \"使用者管理\" },\r\n                    { href: \"/orders/pending\", name: \"等待中的訂單\" },\r\n                    { href: \"/orders/ready\", name: \"完成的訂單\" },\r\n                    { href: \"/kitchen\", name: \"廚房訂單\" },\r\n                ];\r\n            default:\r\n                return [];\r\n        }\r\n    };\r\n\r\n    const handelSignOut = () => {\r\n        // 只需要調用 signOut() 即可，NextAuth.js 會處理 session 的清除\r\n        signOut({ callbackUrl: \"/login\" }); // 登出後跳轉到登入頁\r\n        // ✨ 移除手動清除 sessionStorage 和 setUser 的邏輯\r\n        // sessionStorage.removeItem(\"user\");\r\n        // setUser(null);\r\n        // setIsLogin(false);\r\n    };\r\n\r\n    // 判斷是否已登入和載入狀態\r\n    const isAuthenticated = status === \"authenticated\";\r\n    const isLoading = status === \"loading\";\r\n\r\n    return (\r\n        <nav className=\"sticky top-0 z-50 bg-gradient-to-r from-orange-400 via-pink-500 to-red-500 text-white shadow-md\">\r\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3 flex justify-between items-center overflow-x-auto\">\r\n                <Link\r\n                    href=\"/\"\r\n                    className=\"text-2xl font-bold tracking-wide hover:opacity-90 transition-opacity duration-300\"\r\n                    aria-label=\"前往首頁\"\r\n                >\r\n                    🍽 網路早餐訂餐系統\r\n                </Link>\r\n\r\n                <div className=\"flex flex-wrap items-center gap-4\">\r\n                    {isLoading ? ( // 如果正在載入 session，顯示載入訊息\r\n                        <span className=\"text-sm\">載入中...</span>\r\n                    ) : isAuthenticated ? ( // 如果已認證（登入）\r\n                        <>\r\n                            {getRoleLinks().map((link) => (\r\n                                <Link\r\n                                    key={link.href}\r\n                                    href={link.href}\r\n                                    className=\"text-white font-medium hover:underline hover:text-yellow-200 transition duration-300\"\r\n                                    aria-label={link.name}\r\n                                >\r\n                                    {link.name}\r\n                                </Link>\r\n                            ))}\r\n\r\n                            <span className=\"hidden sm:inline-block font-semibold\">\r\n                                {/* ✨ 使用可選鏈來安全訪問 user.name 或 user.email */}\r\n                                您好，{session?.user?.name || session?.user?.email}\r\n                            </span>\r\n\r\n                            {/* ✨ 關鍵修改：只有當 session.user.id 存在時才渲染 NotifyButton ✨ */}\r\n                            {session.user?.id && <NotifyButton userId={session.user.id} />}\r\n\r\n                            <button\r\n                                onClick={handelSignOut}\r\n                                className=\"bg-white text-pink-600 font-semibold px-3 py-1.5 rounded-md hover:bg-gray-100 transition duration-300\"\r\n                                aria-label=\"登出帳號\"\r\n                            >\r\n                                登出\r\n                            </button>\r\n                        </>\r\n                    ) : ( // 如果未認證（未登入）\r\n                        <Link\r\n                            href=\"/login\"\r\n                            className=\"bg-white text-pink-600 font-semibold px-4 py-1.5 rounded-md hover:bg-gray-100 transition duration-300\"\r\n                            aria-label=\"登入帳號\"\r\n                        >\r\n                            登入\r\n                        </Link>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}"],"names":[],"mappings":"AAAA,4BAA4B;;;;;AAG5B;AACA;AACA,sDAAsD;AACtD,qEAAqE;AAErE,sOAA0D,WAAW;AAPrE;;;;;AASe,SAAS;IACpB,kCAAkC;IAClC,MAAM,EAAE,MAAM,OAAO,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,8IAAA,CAAA,aAAU,AAAD,KAAK,0DAA0D;IAE1G,yDAAyD;IACzD,uCAAuC;IACvC,8CAA8C;IAC9C,+CAA+C;IAE/C,MAAM,eAAe;QACjB,gCAAgC;QAChC,MAAM,WAAW,SAAS,MAAM;QAEhC,IAAI,CAAC,UAAU,OAAO,EAAE,EAAE,2BAA2B;QAErD,gBAAgB;QAChB,OAAQ;YACJ,KAAK;gBACD,OAAO;oBACH;wBAAE,MAAM;wBAAS,MAAM;oBAAK;oBAC5B;wBAAE,MAAM;wBAAW,MAAM;oBAAO;iBACnC;YACL,KAAK;gBACD,OAAO;oBACH;wBAAE,MAAM;wBAAmB,MAAM;oBAAS;oBAC1C;wBAAE,MAAM;wBAAiB,MAAM;oBAAQ;iBAC1C;YACL,KAAK;gBACD,OAAO;oBAAC;wBAAE,MAAM;wBAAY,MAAM;oBAAO;iBAAE;YAC/C,KAAK;gBACD,OAAO;oBACH;wBAAE,MAAM;wBAAe,MAAM;oBAAO;oBACpC;wBAAE,MAAM;wBAAgB,MAAM;oBAAQ;oBACtC;wBAAE,MAAM;wBAAmB,MAAM;oBAAS;oBAC1C;wBAAE,MAAM;wBAAiB,MAAM;oBAAQ;oBACvC;wBAAE,MAAM;wBAAY,MAAM;oBAAO;iBACpC;YACL;gBACI,OAAO,EAAE;QACjB;IACJ;IAEA,MAAM,gBAAgB;QAClB,iDAAiD;QACjD,CAAA,GAAA,8IAAA,CAAA,UAAO,AAAD,EAAE;YAAE,aAAa;QAAS,IAAI,YAAY;IAChD,wCAAwC;IACxC,qCAAqC;IACrC,iBAAiB;IACjB,qBAAqB;IACzB;IAEA,eAAe;IACf,MAAM,kBAAkB,WAAW;IACnC,MAAM,YAAY,WAAW;IAE7B,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC;YAAI,WAAU;;8BACX,8OAAC,4JAAA,CAAA,UAAI;oBACD,MAAK;oBACL,WAAU;oBACV,cAAW;8BACd;;;;;;8BAID,8OAAC;oBAAI,WAAU;8BACV,0BACG,8OAAC;wBAAK,WAAU;kCAAU;;;;;+BAC1B,gCACA;;4BACK,eAAe,GAAG,CAAC,CAAC,qBACjB,8OAAC,4JAAA,CAAA,UAAI;oCAED,MAAM,KAAK,IAAI;oCACf,WAAU;oCACV,cAAY,KAAK,IAAI;8CAEpB,KAAK,IAAI;mCALL,KAAK,IAAI;;;;;0CAStB,8OAAC;gCAAK,WAAU;;oCAC+B;oCACvC,SAAS,MAAM,QAAQ,SAAS,MAAM;;;;;;;4BAI7C,QAAQ,IAAI,EAAE,oBAAM,8OAAC,kIAAA,CAAA,UAAY;gCAAC,QAAQ,QAAQ,IAAI,CAAC,EAAE;;;;;;0CAE1D,8OAAC;gCACG,SAAS;gCACT,WAAU;gCACV,cAAW;0CACd;;;;;;;qDAKL,8OAAC,4JAAA,CAAA,UAAI;wBACD,MAAK;wBACL,WAAU;wBACV,cAAW;kCACd;;;;;;;;;;;;;;;;;;;;;;AAQzB","debugId":null}},
    {"offset": {"line": 886, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/components/sessionNavbar.jsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { SessionProvider } from \"next-auth/react\";\r\nimport React from \"react\";\r\nimport Navbar from \"./navbar\";\r\n\r\nexport default function SessionNavbar({session}) {\r\n    return (\r\n        <SessionProvider session={session}>\r\n            <Navbar />\r\n        </SessionProvider>\r\n    );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMe,SAAS,cAAc,EAAC,OAAO,EAAC;IAC3C,qBACI,8OAAC,8IAAA,CAAA,kBAAe;QAAC,SAAS;kBACtB,cAAA,8OAAC,4HAAA,CAAA,UAAM;;;;;;;;;;AAGnB","debugId":null}},
    {"offset": {"line": 918, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/components/authSessionProvider.jsx"],"sourcesContent":["// app/providers.jsx\r\n\"use client\";\r\nimport { SessionProvider } from \"next-auth/react\";\r\n\r\nexport default function Providers({ children }) {\r\n  return <SessionProvider>{children}</SessionProvider>;\r\n}\r\n"],"names":[],"mappings":"AAAA,oBAAoB;;;;;AAEpB;AADA;;;AAGe,SAAS,UAAU,EAAE,QAAQ,EAAE;IAC5C,qBAAO,8OAAC,8IAAA,CAAA,kBAAe;kBAAE;;;;;;AAC3B","debugId":null}},
    {"offset": {"line": 942, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/components/RouteEvents.js"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\nexport default function RouterEvents() {\r\n  const router = useRouter();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const start = () => setLoading(true);\r\n    const end = () => setLoading(false);\r\n\r\n    router.events?.on(\"routeChangeStart\", start);\r\n    router.events?.on(\"routeChangeComplete\", end);\r\n    router.events?.on(\"routeChangeError\", end);\r\n\r\n    return () => {\r\n      router.events?.off(\"routeChangeStart\", start);\r\n      router.events?.off(\"routeChangeComplete\", end);\r\n      router.events?.off(\"routeChangeError\", end);\r\n    };\r\n  }, [router]);\r\n\r\n  if (!loading) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-white/70 z-[9999] flex items-center justify-center\">\r\n      <div className=\"text-gray-700 text-lg font-semibold\">頁面切換中...</div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKe,SAAS;IACtB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,QAAQ,IAAM,WAAW;QAC/B,MAAM,MAAM,IAAM,WAAW;QAE7B,OAAO,MAAM,EAAE,GAAG,oBAAoB;QACtC,OAAO,MAAM,EAAE,GAAG,uBAAuB;QACzC,OAAO,MAAM,EAAE,GAAG,oBAAoB;QAEtC,OAAO;YACL,OAAO,MAAM,EAAE,IAAI,oBAAoB;YACvC,OAAO,MAAM,EAAE,IAAI,uBAAuB;YAC1C,OAAO,MAAM,EAAE,IAAI,oBAAoB;QACzC;IACF,GAAG;QAAC;KAAO;IAEX,IAAI,CAAC,SAAS,OAAO;IAErB,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;sBAAsC;;;;;;;;;;;AAG3D","debugId":null}}]
}
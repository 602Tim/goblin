{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/lib/prisma.ts"],"sourcesContent":["// lib/prisma.ts\r\nimport { PrismaClient } from \"@prisma/client\";\r\n\r\ndeclare global {\r\n  // eslint-disable-next-line no-var\r\n  var prisma: PrismaClient | undefined;\r\n}\r\n\r\nconst globalForPrisma = globalThis as typeof globalThis & {\r\n  prisma?: PrismaClient;\r\n};\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalForPrisma.prisma = prisma;\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAOA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B","debugId":null}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/actions/notification.js"],"sourcesContent":["// app/actions/notification.js (修正後)\r\n\"use server\"; // ✨ 必須有這行，將其標記為 Server Actions\r\n\r\nimport { prisma } from '@/lib/prisma'; // ✨ 導入具名導出的 prisma 客戶端\r\n\r\nexport const addNotification = async (body, userId) => {\r\n    try {\r\n        // ✨ 這裡應該是添加通知到資料庫的邏輯\r\n        if (!userId || !body || !body.message || !body.orderId || !body.title || !body.type) {\r\n            throw new Error(\"Missing notification data or userId.\");\r\n        }\r\n        const newNotification = await prisma.notification.create({\r\n            data: {\r\n                userId: userId,\r\n                orderId: body.orderId, // 假設 body 包含 orderId\r\n                message: body.message,\r\n                // 其他欄位如 isRead 會有 default 值\r\n                // title 和 type 需要在你的 Notification model 中定義或處理\r\n            }\r\n        });\r\n        return { success: true, notification: newNotification };\r\n    } catch (error) {\r\n        console.error(\"Failed to add notification (Server Action):\", error);\r\n        return { error: error.message };\r\n    }\r\n};\r\n\r\nexport const getUserNotification = async (userId) => {\r\n    try {\r\n        // ✨ 這裡應該是從資料庫獲取使用者通知的邏輯\r\n        if (!userId) {\r\n            throw new Error(\"User ID is required for fetching notifications.\");\r\n        }\r\n        const notifications = await prisma.notification.findMany({\r\n            where: { userId: userId },\r\n            orderBy: { createdAt: 'desc' }, // 按最新排序\r\n        });\r\n        return notifications;\r\n    } catch (error) {\r\n        console.error(\"Failed to get user notifications (Server Action):\", error);\r\n        return { error: error.message }; // 返回錯誤訊息，以便前端處理\r\n    }\r\n};\r\n\r\nexport const deleteNotification = async (notificationId) => {\r\n    try {\r\n        // ✨ 這裡應該是從資料庫刪除通知的邏輯\r\n        if (!notificationId) {\r\n            throw new Error(\"Notification ID is required for deleting.\");\r\n        }\r\n        await prisma.notification.delete({\r\n            where: { id: notificationId },\r\n        });\r\n        return { success: true };\r\n    } catch (error) {\r\n        console.error(\"Failed to delete notification (Server Action):\", error);\r\n        // 如果是找不到通知的錯誤，可以更精確地處理\r\n        if (error.code === 'P2025') {\r\n            return { error: \"Notification not found.\" };\r\n        }\r\n        return { error: error.message };\r\n    }\r\n};"],"names":[],"mappings":"AAAA,oCAAoC;;;;;;;;AAGpC,+LAAuC,uBAAuB;;;;;AAEvD,MAAM,kBAAkB,OAAO,MAAM;IACxC,IAAI;QACA,qBAAqB;QACrB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,IAAI,EAAE;YACjF,MAAM,IAAI,MAAM;QACpB;QACA,MAAM,kBAAkB,MAAM,6GAAA,CAAA,SAAM,CAAC,YAAY,CAAC,MAAM,CAAC;YACrD,MAAM;gBACF,QAAQ;gBACR,SAAS,KAAK,OAAO;gBACrB,SAAS,KAAK,OAAO;YAGzB;QACJ;QACA,OAAO;YAAE,SAAS;YAAM,cAAc;QAAgB;IAC1D,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+CAA+C;QAC7D,OAAO;YAAE,OAAO,MAAM,OAAO;QAAC;IAClC;AACJ;AAEO,MAAM,sBAAsB,OAAO;IACtC,IAAI;QACA,wBAAwB;QACxB,IAAI,CAAC,QAAQ;YACT,MAAM,IAAI,MAAM;QACpB;QACA,MAAM,gBAAgB,MAAM,6GAAA,CAAA,SAAM,CAAC,YAAY,CAAC,QAAQ,CAAC;YACrD,OAAO;gBAAE,QAAQ;YAAO;YACxB,SAAS;gBAAE,WAAW;YAAO;QACjC;QACA,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,qDAAqD;QACnE,OAAO;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG,gBAAgB;IACrD;AACJ;AAEO,MAAM,qBAAqB,OAAO;IACrC,IAAI;QACA,qBAAqB;QACrB,IAAI,CAAC,gBAAgB;YACjB,MAAM,IAAI,MAAM;QACpB;QACA,MAAM,6GAAA,CAAA,SAAM,CAAC,YAAY,CAAC,MAAM,CAAC;YAC7B,OAAO;gBAAE,IAAI;YAAe;QAChC;QACA,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,kDAAkD;QAChE,uBAAuB;QACvB,IAAI,MAAM,IAAI,KAAK,SAAS;YACxB,OAAO;gBAAE,OAAO;YAA0B;QAC9C;QACA,OAAO;YAAE,OAAO,MAAM,OAAO;QAAC;IAClC;AACJ;;;IAzDa;IAsBA;IAiBA;;AAvCA,+OAAA;AAsBA,+OAAA;AAiBA,+OAAA","debugId":null}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/.next-internal/server/app/_not-found/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {deleteNotification as '7fd691921fda169e2dab6445c454d571f3988b3ca9'} from 'ACTIONS_MODULE0'\nexport {getUserNotification as '7f9a3f1e383f6fec2456938bc1aa06aaebb6660a83'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}}]
}
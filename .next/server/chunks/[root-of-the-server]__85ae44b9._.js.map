{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/lib/prisma.ts"],"sourcesContent":["// lib/prisma.ts\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\n// --- Prisma: Singleton ---\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma?: PrismaClient;\r\n};\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalForPrisma.prisma = prisma;\r\n}\r\n\r\n// --- Supabase ---\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error(\"❌ Supabase 環境變數未設定\");\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;;AAChB;AACA;;;AAEA,4BAA4B;AAC5B,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAE5C,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B;AAEA,mBAAmB;AACnB,MAAM;AACN,MAAM;AAEN,uCAAsC;;AAEtC;AAEO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa","debugId":null}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/api/order/checkout/route.js"],"sourcesContent":["\r\n// app/api/order/list/route.js\r\nimport { getToken } from \"next-auth/jwt\";\r\nimport { prisma } from \"../../../../lib/prisma\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nconst secret = process.env.NEXTAUTH_SECRET;\r\n\r\nexport async function GET(req) {\r\n  // ✅ 使用風險寫法：只檢查是否有登入，不驗證角色\r\n  const token = await getToken({ req, secret });\r\n\r\n  if (!token?.id) {\r\n    return new Response(\"請先登入\", { status: 401 });\r\n  }\r\n\r\n  const userId = token.id;\r\n\r\n  try {\r\n    const orders = await prisma.order.findMany({\r\n      where: { customerId: userId },\r\n      orderBy: { createdAt: \"desc\" },\r\n      select: {\r\n        id: true,\r\n        createdAt: true,\r\n        status: true,\r\n        totalAmount: true,\r\n        paymentStatus: true,\r\n        completedAt: true,\r\n        items: {\r\n          select: {\r\n            id: true,\r\n            quantity: true,\r\n            specialRequest: true,\r\n            menuItem: {\r\n              select: {\r\n                name: true,\r\n                price: true,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(orders);\r\n  } catch (error) {\r\n    console.error(\"取得訂單列表錯誤:\", error);\r\n    return new Response(\"伺服器錯誤\", { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":"AACA,8BAA8B;;;;AAC9B;AACA;AACA;;;;AAEA,MAAM,SAAS,QAAQ,GAAG,CAAC,eAAe;AAEnC,eAAe,IAAI,GAAG;IAC3B,0BAA0B;IAC1B,MAAM,QAAQ,MAAM,CAAA,GAAA,8IAAA,CAAA,WAAQ,AAAD,EAAE;QAAE;QAAK;IAAO;IAE3C,IAAI,CAAC,OAAO,IAAI;QACd,OAAO,IAAI,SAAS,QAAQ;YAAE,QAAQ;QAAI;IAC5C;IAEA,MAAM,SAAS,MAAM,EAAE;IAEvB,IAAI;QACF,MAAM,SAAS,MAAM,+GAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;YACzC,OAAO;gBAAE,YAAY;YAAO;YAC5B,SAAS;gBAAE,WAAW;YAAO;YAC7B,QAAQ;gBACN,IAAI;gBACJ,WAAW;gBACX,QAAQ;gBACR,aAAa;gBACb,eAAe;gBACf,aAAa;gBACb,OAAO;oBACL,QAAQ;wBACN,IAAI;wBACJ,UAAU;wBACV,gBAAgB;wBAChB,UAAU;4BACR,QAAQ;gCACN,MAAM;gCACN,OAAO;4BACT;wBACF;oBACF;gBACF;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,aAAa;QAC3B,OAAO,IAAI,SAAS,SAAS;YAAE,QAAQ;QAAI;IAC7C;AACF","debugId":null}}]
}
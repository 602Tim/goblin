{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/lib/prisma.ts"],"sourcesContent":["// lib/prisma.ts\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\n// --- Prisma: Singleton ---\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma?: PrismaClient;\r\n};\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalForPrisma.prisma = prisma;\r\n}\r\n\r\n// --- Supabase ---\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error(\"❌ Supabase 環境變數未設定\");\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;;AAChB;AACA;;;AAEA,4BAA4B;AAC5B,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAE5C,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B;AAEA,mBAAmB;AACnB,MAAM;AACN,MAAM;AAEN,uCAAsC;;AAEtC;AAEO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/api/menu/%5Bid%5D/route.js"],"sourcesContent":["import { prisma } from \"../../../../lib/prisma\";\r\n\r\nexport async function PUT(req, context) {\r\n  const { params } = await context;\r\n\r\n  try {\r\n    const id = parseInt(params.id);\r\n    if (isNaN(id)) {\r\n      return new Response(\"Invalid id\", { status: 400 });\r\n    }\r\n\r\n    const body = await req.json();\r\n    const { name, description, price, imageUrl, isAvailable } = body;\r\n\r\n    if (!name || price === undefined) {\r\n      return new Response(\"Missing required fields\", { status: 400 });\r\n    }\r\n\r\n    const updatedItem = await prisma.menuItem.update({\r\n      where: { id },\r\n      data: {\r\n        name,\r\n        description: description || \"\",\r\n        price: parseFloat(price),\r\n        imageUrl: imageUrl || null,\r\n        isAvailable: isAvailable ?? true,\r\n      },\r\n    });\r\n\r\n    return new Response(JSON.stringify(updatedItem), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  } catch (err) {\r\n    console.error(\"❌ 更新菜單失敗：\", err);\r\n    return new Response(\"Internal Server Error\", { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,IAAI,GAAG,EAAE,OAAO;IACpC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM;IAEzB,IAAI;QACF,MAAM,KAAK,SAAS,OAAO,EAAE;QAC7B,IAAI,MAAM,KAAK;YACb,OAAO,IAAI,SAAS,cAAc;gBAAE,QAAQ;YAAI;QAClD;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG;QAE5D,IAAI,CAAC,QAAQ,UAAU,WAAW;YAChC,OAAO,IAAI,SAAS,2BAA2B;gBAAE,QAAQ;YAAI;QAC/D;QAEA,MAAM,cAAc,MAAM,+GAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC/C,OAAO;gBAAE;YAAG;YACZ,MAAM;gBACJ;gBACA,aAAa,eAAe;gBAC5B,OAAO,WAAW;gBAClB,UAAU,YAAY;gBACtB,aAAa,eAAe;YAC9B;QACF;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,cAAc;YAC/C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,aAAa;QAC3B,OAAO,IAAI,SAAS,yBAAyB;YAAE,QAAQ;QAAI;IAC7D;AACF","debugId":null}}]
}
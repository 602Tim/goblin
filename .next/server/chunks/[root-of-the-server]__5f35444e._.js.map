{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/lib/prisma.ts"],"sourcesContent":["// lib/prisma.ts\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\n// --- Prisma: Singleton ---\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma?: PrismaClient;\r\n};\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalForPrisma.prisma = prisma;\r\n}\r\n\r\n// --- Supabase ---\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error(\"❌ Supabase 環境變數未設定\");\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;;AAChB;AACA;;;AAEA,4BAA4B;AAC5B,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAE5C,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B;AAEA,mBAAmB;AACnB,MAAM;AACN,MAAM;AAEN,uCAAsC;;AAEtC;AAEO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa","debugId":null}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/api/order/checkout/route.js"],"sourcesContent":["import { prisma } from \"../../../../lib/prisma\";\r\nimport { getToken } from \"next-auth/jwt\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nconst secret = process.env.NEXTAUTH_SECRET;\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const token = await getToken({ req, secret });\r\n\r\n    if (!token?.sub) {\r\n      return new Response(\"未登入\", { status: 401 });\r\n    }\r\n\r\n    const customerId = token.sub;\r\n\r\n    const body = await req.json();\r\n\r\n    if (!Array.isArray(body.orderItems) || body.orderItems.length === 0) {\r\n      return new Response(\"缺少訂單項目\", { status: 400 });\r\n    }\r\n\r\n    for (const item of body.orderItems) {\r\n      if (!item.menuItemId) {\r\n        return new Response(\"訂單項目缺少 menuItemId\", { status: 400 });\r\n      }\r\n      if (!item.quantity || item.quantity < 1) {\r\n        return new Response(\"訂單項目數量不正確\", { status: 400 });\r\n      }\r\n    }\r\n\r\n    const menuItemIds = body.orderItems.map(i => i.menuItemId);\r\n    const menuItems = await prisma.menuItem.findMany({\r\n      where: { id: { in: menuItemIds } },\r\n      select: { id: true, price: true, isAvailable: true },\r\n    });\r\n\r\n    if (menuItems.length !== menuItemIds.length) {\r\n      return new Response(\"訂單中有不存在的菜單項目\", { status: 400 });\r\n    }\r\n\r\n    if (menuItems.some(mi => mi.isAvailable === false)) {\r\n      return new Response(\"訂單中包含不可用的菜單項目\", { status: 400 });\r\n    }\r\n\r\n    const priceMap = {};\r\n    menuItems.forEach(mi => {\r\n      priceMap[mi.id] = mi.price;\r\n    });\r\n\r\n    const totalAmount = body.orderItems.reduce((sum, item) => {\r\n      return sum + (priceMap[item.menuItemId] ?? 0) * item.quantity;\r\n    }, 0);\r\n\r\n    const newOrder = await prisma.order.create({\r\n      data: {\r\n        customerId, // ✅ 正確指定\r\n        totalAmount,\r\n        items: {\r\n          create: body.orderItems.map(item => ({\r\n            menuItemId: item.menuItemId,\r\n            quantity: item.quantity,\r\n            specialRequest: item.specialRequest || \"\",\r\n          })),\r\n        },\r\n      },\r\n      include: {\r\n        items: true,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(newOrder);\r\n  } catch (error) {\r\n    console.error(\"❌ 建立訂單錯誤:\", error);\r\n    return new Response(\"伺服器錯誤\", { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,SAAS,QAAQ,GAAG,CAAC,eAAe;AAEnC,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,QAAQ,MAAM,CAAA,GAAA,8IAAA,CAAA,WAAQ,AAAD,EAAE;YAAE;YAAK;QAAO;QAE3C,IAAI,CAAC,OAAO,KAAK;YACf,OAAO,IAAI,SAAS,OAAO;gBAAE,QAAQ;YAAI;QAC3C;QAEA,MAAM,aAAa,MAAM,GAAG;QAE5B,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,IAAI,CAAC,MAAM,OAAO,CAAC,KAAK,UAAU,KAAK,KAAK,UAAU,CAAC,MAAM,KAAK,GAAG;YACnE,OAAO,IAAI,SAAS,UAAU;gBAAE,QAAQ;YAAI;QAC9C;QAEA,KAAK,MAAM,QAAQ,KAAK,UAAU,CAAE;YAClC,IAAI,CAAC,KAAK,UAAU,EAAE;gBACpB,OAAO,IAAI,SAAS,qBAAqB;oBAAE,QAAQ;gBAAI;YACzD;YACA,IAAI,CAAC,KAAK,QAAQ,IAAI,KAAK,QAAQ,GAAG,GAAG;gBACvC,OAAO,IAAI,SAAS,aAAa;oBAAE,QAAQ;gBAAI;YACjD;QACF;QAEA,MAAM,cAAc,KAAK,UAAU,CAAC,GAAG,CAAC,CAAA,IAAK,EAAE,UAAU;QACzD,MAAM,YAAY,MAAM,+GAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAC/C,OAAO;gBAAE,IAAI;oBAAE,IAAI;gBAAY;YAAE;YACjC,QAAQ;gBAAE,IAAI;gBAAM,OAAO;gBAAM,aAAa;YAAK;QACrD;QAEA,IAAI,UAAU,MAAM,KAAK,YAAY,MAAM,EAAE;YAC3C,OAAO,IAAI,SAAS,gBAAgB;gBAAE,QAAQ;YAAI;QACpD;QAEA,IAAI,UAAU,IAAI,CAAC,CAAA,KAAM,GAAG,WAAW,KAAK,QAAQ;YAClD,OAAO,IAAI,SAAS,iBAAiB;gBAAE,QAAQ;YAAI;QACrD;QAEA,MAAM,WAAW,CAAC;QAClB,UAAU,OAAO,CAAC,CAAA;YAChB,QAAQ,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,KAAK;QAC5B;QAEA,MAAM,cAAc,KAAK,UAAU,CAAC,MAAM,CAAC,CAAC,KAAK;YAC/C,OAAO,MAAM,CAAC,QAAQ,CAAC,KAAK,UAAU,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ;QAC/D,GAAG;QAEH,MAAM,WAAW,MAAM,+GAAA,CAAA,SAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YACzC,MAAM;gBACJ;gBACA;gBACA,OAAO;oBACL,QAAQ,KAAK,UAAU,CAAC,GAAG,CAAC,CAAA,OAAQ,CAAC;4BACnC,YAAY,KAAK,UAAU;4BAC3B,UAAU,KAAK,QAAQ;4BACvB,gBAAgB,KAAK,cAAc,IAAI;wBACzC,CAAC;gBACH;YACF;YACA,SAAS;gBACP,OAAO;YACT;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,aAAa;QAC3B,OAAO,IAAI,SAAS,SAAS;YAAE,QAAQ;QAAI;IAC7C;AACF","debugId":null}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/lib/prisma.ts"],"sourcesContent":["// lib/prisma.ts\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\n// --- Prisma: Singleton ---\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma?: PrismaClient;\r\n};\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  globalForPrisma.prisma = prisma;\r\n}\r\n\r\n// --- Supabase ---\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error(\"❌ Supabase 環境變數未設定\");\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;;AAChB;AACA;;;AAEA,4BAA4B;AAC5B,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAE5C,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B;AAEA,mBAAmB;AACnB,MAAM;AACN,MAAM;AAEN,uCAAsC;;AAEtC;AAEO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///D:/113-2/Breakfast-final-project/app/api/order/completed/route.js"],"sourcesContent":["// app/api/order/completed/route.js\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nexport async function GET() {\r\n  try {\r\n    const orders = await prisma.order.findMany({\r\n      where: { status: \"COMPLETED\" },\r\n      include: {\r\n        customer: true,\r\n        items: {\r\n          include: { menuItem: true },\r\n        },\r\n      },\r\n      orderBy: { completedAt: \"desc\" },\r\n    });\r\n\r\n    return NextResponse.json(orders);\r\n  } catch (err) {\r\n    console.error(\"❌ 讀取完成訂單失敗:\", err);\r\n    return new Response(\"伺服器錯誤\", { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,mCAAmC;;;;AACnC;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,+GAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;YACzC,OAAO;gBAAE,QAAQ;YAAY;YAC7B,SAAS;gBACP,UAAU;gBACV,OAAO;oBACL,SAAS;wBAAE,UAAU;oBAAK;gBAC5B;YACF;YACA,SAAS;gBAAE,aAAa;YAAO;QACjC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,eAAe;QAC7B,OAAO,IAAI,SAAS,SAAS;YAAE,QAAQ;QAAI;IAC7C;AACF","debugId":null}}]
}